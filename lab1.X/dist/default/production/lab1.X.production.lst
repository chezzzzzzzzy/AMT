

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 22 16:22:22 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32  0000                     
    33                           ; Version 2.05
    34                           ; Generated 20/12/2018 GMT
    35                           ; 
    36                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F97J60 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	idataBANK0
    69  001ACC                     __pidataBANK0:
    70                           	opt callstack 0
    71                           
    72                           ;initializer for _scan_code
    73  001ACC  EB                 	db	235
    74  001ACD  77                 	db	119
    75  001ACE  7B                 	db	123
    76  001ACF  7D                 	db	125
    77  001AD0  B7                 	db	183
    78  001AD1  BB                 	db	187
    79  001AD2  BD                 	db	189
    80  001AD3  D7                 	db	215
    81  001AD4  DB                 	db	219
    82  001AD5  DD                 	db	221
    83  001AD6  7E                 	db	126
    84  001AD7  BE                 	db	190
    85  001AD8  DE                 	db	222
    86  001AD9  EE                 	db	238
    87  001ADA  E7                 	db	231
    88  001ADB  ED                 	db	237
    89                           
    90                           ;initializer for main@F5215
    91  001ADC  48                 	db	72
    92  001ADD  65                 	db	101
    93  001ADE  6C                 	db	108
    94  001ADF  6C                 	db	108
    95  001AE0  6F                 	db	111
    96  001AE1  20                 	db	32
    97  001AE2  2E                 	db	46
    98  001AE3  2E                 	db	46
    99  001AE4  2E                 	db	46
   100  001AE5  00                 	db	0
   101  0000                     _PORTD	set	3971
   102  0000                     _LATD	set	3980
   103  0000                     _TRISD	set	3989
   104  0000                     _LATE	set	3981
   105  0000                     _LATHbits	set	3984
   106  0000                     _TRISH	set	3993
   107  0000                     _TRISE	set	3990
   108                           
   109                           	psect	smallconst
   110  001000                     __psmallconst:
   111                           	opt callstack 0
   112  001000  00                 	db	0
   113  001001                     STR_1:
   114  001001  44                 	db	68	;'D'
   115  001002  61                 	db	97	;'a'
   116  001003  74                 	db	116	;'t'
   117  001004  61                 	db	97	;'a'
   118  001005  20                 	db	32
   119  001006  6F                 	db	111	;'o'
   120  001007  66                 	db	102	;'f'
   121  001008  20                 	db	32
   122  001009  69                 	db	105	;'i'
   123  00100A  20                 	db	32
   124  00100B  3D                 	db	61	;'='
   125  00100C  20                 	db	32
   126  00100D  25                 	db	37
   127  00100E  64                 	db	100	;'d'
   128  00100F  00                 	db	0
   129                           
   130                           ; #config settings
   131  001010  00                 	db	0	; dummy byte at the end
   132  0000                     
   133                           	psect	cinit
   134  001962                     __pcinit:
   135                           	opt callstack 0
   136  001962                     start_initialization:
   137                           	opt callstack 0
   138  001962                     __initialization:
   139                           	opt callstack 0
   140                           
   141                           ; Initialize objects allocated to BANK0 (26 bytes)
   142                           ; load TBLPTR registers with __pidataBANK0
   143  001962  0ECC               	movlw	low __pidataBANK0
   144  001964  6EF6               	movwf	tblptrl,c
   145  001966  0E1A               	movlw	high __pidataBANK0
   146  001968  6EF7               	movwf	tblptrh,c
   147  00196A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   148  00196C  6EF8               	movwf	tblptru,c
   149  00196E  EE00  F0AC         	lfsr	0,__pdataBANK0
   150  001972  EE10 F01A          	lfsr	1,26
   151  001976                     copy_data0:
   152  001976  0009               	tblrd		*+
   153  001978  CFF5 FFEE          	movff	tablat,postinc0
   154  00197C  50E5               	movf	postdec1,w,c
   155  00197E  50E1               	movf	fsr1l,w,c
   156  001980  E1FA               	bnz	copy_data0
   157                           
   158                           ; Clear objects allocated to BANK0 (38 bytes)
   159  001982  EE00  F060         	lfsr	0,__pbssBANK0
   160  001986  0E26               	movlw	38
   161  001988                     clear_0:
   162  001988  6AEE               	clrf	postinc0,c
   163  00198A  06E8               	decf	wreg,f,c
   164  00198C  E1FD               	bnz	clear_0
   165                           
   166                           ; Clear objects allocated to COMRAM (2 bytes)
   167  00198E  6A5F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   168  001990  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   169  001992                     end_of_initialization:
   170                           	opt callstack 0
   171  001992                     __end_of__initialization:
   172                           	opt callstack 0
   173  001992  0E00               	movlw	low (__Lsmallconst shr (0+16))
   174  001994  6EF8               	movwf	tblptru,c
   175  001996  0E10               	movlw	high __Lsmallconst
   176  001998  6EF7               	movwf	tblptrh,c
   177  00199A  0100               	movlb	0
   178  00199C  EF20  F00C         	goto	_main	;jump to C main() function
   179                           
   180                           	psect	bssCOMRAM
   181  00005E                     __pbssCOMRAM:
   182                           	opt callstack 0
   183  00005E                     _flags:
   184                           	opt callstack 0
   185  00005E                     	ds	2
   186                           
   187                           	psect	bssBANK0
   188  000060                     __pbssBANK0:
   189                           	opt callstack 0
   190  000060                     _nout:
   191                           	opt callstack 0
   192  000060                     	ds	2
   193  000062                     _width:
   194                           	opt callstack 0
   195  000062                     	ds	2
   196  000064                     _prec:
   197                           	opt callstack 0
   198  000064                     	ds	2
   199  000066                     _dbuf:
   200                           	opt callstack 0
   201  000066                     	ds	32
   202                           
   203                           	psect	dataBANK0
   204  0000AC                     __pdataBANK0:
   205                           	opt callstack 0
   206  0000AC                     _scan_code:
   207                           	opt callstack 0
   208  0000AC                     	ds	16
   209  0000BC                     main@F5215:
   210                           	opt callstack 0
   211  0000BC                     	ds	10
   212                           
   213                           	psect	cstackBANK0
   214  000086                     __pcstackBANK0:
   215                           	opt callstack 0
   216  000086                     	ds	2
   217  000088                     sprintf@ap:
   218                           	opt callstack 0
   219                           
   220                           ; 2 bytes @ 0x2
   221  000088                     	ds	2
   222  00008A                     sprintf@f:
   223                           	opt callstack 0
   224                           
   225                           ; 6 bytes @ 0x4
   226  00008A                     	ds	6
   227  000090                     main@msg:
   228                           	opt callstack 0
   229                           
   230                           ; 10 bytes @ 0xA
   231  000090                     	ds	10
   232  00009A                     main@buffer:
   233                           	opt callstack 0
   234                           
   235                           ; 16 bytes @ 0x14
   236  00009A                     	ds	16
   237  0000AA                     main@i:
   238                           	opt callstack 0
   239                           
   240                           ; 2 bytes @ 0x24
   241  0000AA                     	ds	2
   242                           
   243                           	psect	cstackCOMRAM
   244  000001                     __pcstackCOMRAM:
   245                           	opt callstack 0
   246  000001                     ?_strlen:
   247                           	opt callstack 0
   248  000001                     ?___aodiv:
   249                           	opt callstack 0
   250  000001                     ?___aomod:
   251                           	opt callstack 0
   252  000001                     delay_ms@x:
   253                           	opt callstack 0
   254  000001                     delay_us@x:
   255                           	opt callstack 0
   256  000001                     fputc@c:
   257                           	opt callstack 0
   258  000001                     strlen@s:
   259                           	opt callstack 0
   260  000001                     ___aodiv@dividend:
   261                           	opt callstack 0
   262  000001                     ___aomod@dividend:
   263                           	opt callstack 0
   264                           
   265                           ; 8 bytes @ 0x0
   266  000001                     	ds	2
   267  000003                     ??_delay_ms:
   268  000003                     ??_delay_us:
   269  000003                     fputc@fp:
   270                           	opt callstack 0
   271  000003                     strlen@a:
   272                           	opt callstack 0
   273                           
   274                           ; 2 bytes @ 0x2
   275  000003                     	ds	1
   276  000004                     delay_ms@i:
   277                           	opt callstack 0
   278  000004                     delay_us@i:
   279                           	opt callstack 0
   280                           
   281                           ; 2 bytes @ 0x3
   282  000004                     	ds	1
   283  000005                     ??_fputc:
   284                           
   285                           ; 1 bytes @ 0x4
   286  000005                     	ds	1
   287  000006                     LCD8send@mode:
   288                           	opt callstack 0
   289                           
   290                           ; 1 bytes @ 0x5
   291  000006                     	ds	1
   292  000007                     LCD8send@c:
   293                           	opt callstack 0
   294                           
   295                           ; 1 bytes @ 0x6
   296  000007                     	ds	1
   297  000008                     
   298                           ; 1 bytes @ 0x7
   299  000008                     	ds	1
   300  000009                     ___aodiv@divisor:
   301                           	opt callstack 0
   302  000009                     ___aomod@divisor:
   303                           	opt callstack 0
   304                           
   305                           ; 8 bytes @ 0x8
   306  000009                     	ds	1
   307  00000A                     fputs@s:
   308                           	opt callstack 0
   309                           
   310                           ; 2 bytes @ 0x9
   311  00000A                     	ds	2
   312  00000C                     fputs@fp:
   313                           	opt callstack 0
   314                           
   315                           ; 2 bytes @ 0xB
   316  00000C                     	ds	2
   317  00000E                     fputs@c:
   318                           	opt callstack 0
   319                           
   320                           ; 1 bytes @ 0xD
   321  00000E                     	ds	1
   322  00000F                     fputs@i:
   323                           	opt callstack 0
   324                           
   325                           ; 2 bytes @ 0xE
   326  00000F                     	ds	2
   327  000011                     ?_pad:
   328                           	opt callstack 0
   329  000011                     ___aodiv@counter:
   330                           	opt callstack 0
   331  000011                     ___aomod@counter:
   332                           	opt callstack 0
   333  000011                     pad@fp:
   334                           	opt callstack 0
   335                           
   336                           ; 2 bytes @ 0x10
   337  000011                     	ds	1
   338  000012                     ___aodiv@sign:
   339                           	opt callstack 0
   340  000012                     ___aomod@sign:
   341                           	opt callstack 0
   342                           
   343                           ; 1 bytes @ 0x11
   344  000012                     	ds	1
   345  000013                     ?_abs:
   346                           	opt callstack 0
   347  000013                     pad@buf:
   348                           	opt callstack 0
   349  000013                     abs@a:
   350                           	opt callstack 0
   351  000013                     ___aodiv@quotient:
   352                           	opt callstack 0
   353                           
   354                           ; 8 bytes @ 0x12
   355  000013                     	ds	2
   356  000015                     ??_abs:
   357  000015                     pad@p:
   358                           	opt callstack 0
   359                           
   360                           ; 2 bytes @ 0x14
   361  000015                     	ds	2
   362  000017                     ??_pad:
   363                           
   364                           ; 1 bytes @ 0x16
   365  000017                     	ds	1
   366  000018                     pad@i:
   367                           	opt callstack 0
   368                           
   369                           ; 2 bytes @ 0x17
   370  000018                     	ds	2
   371  00001A                     pad@w:
   372                           	opt callstack 0
   373                           
   374                           ; 2 bytes @ 0x19
   375  00001A                     	ds	2
   376  00001C                     ?_dtoa:
   377                           	opt callstack 0
   378  00001C                     dtoa@fp:
   379                           	opt callstack 0
   380                           
   381                           ; 2 bytes @ 0x1B
   382  00001C                     	ds	2
   383  00001E                     dtoa@d:
   384                           	opt callstack 0
   385                           
   386                           ; 8 bytes @ 0x1D
   387  00001E                     	ds	8
   388  000026                     ??_dtoa:
   389                           
   390                           ; 1 bytes @ 0x25
   391  000026                     	ds	8
   392  00002E                     _dtoa$200:
   393                           	opt callstack 0
   394                           
   395                           ; 2 bytes @ 0x2D
   396  00002E                     	ds	2
   397  000030                     dtoa@p:
   398                           	opt callstack 0
   399                           
   400                           ; 2 bytes @ 0x2F
   401  000030                     	ds	2
   402  000032                     dtoa@w:
   403                           	opt callstack 0
   404                           
   405                           ; 2 bytes @ 0x31
   406  000032                     	ds	2
   407  000034                     dtoa@s:
   408                           	opt callstack 0
   409                           
   410                           ; 2 bytes @ 0x33
   411  000034                     	ds	2
   412  000036                     dtoa@n:
   413                           	opt callstack 0
   414                           
   415                           ; 8 bytes @ 0x35
   416  000036                     	ds	8
   417  00003E                     dtoa@i:
   418                           	opt callstack 0
   419                           
   420                           ; 2 bytes @ 0x3D
   421  00003E                     	ds	2
   422  000040                     ?_vfpfcnvrt:
   423                           	opt callstack 0
   424  000040                     vfpfcnvrt@fp:
   425                           	opt callstack 0
   426                           
   427                           ; 2 bytes @ 0x3F
   428  000040                     	ds	2
   429  000042                     vfpfcnvrt@fmt:
   430                           	opt callstack 0
   431                           
   432                           ; 2 bytes @ 0x41
   433  000042                     	ds	2
   434  000044                     vfpfcnvrt@ap:
   435                           	opt callstack 0
   436                           
   437                           ; 2 bytes @ 0x43
   438  000044                     	ds	2
   439  000046                     ??_vfpfcnvrt:
   440                           
   441                           ; 1 bytes @ 0x45
   442  000046                     	ds	2
   443  000048                     vfpfcnvrt@ll:
   444                           	opt callstack 0
   445                           
   446                           ; 8 bytes @ 0x47
   447  000048                     	ds	8
   448  000050                     ?_vfprintf:
   449                           	opt callstack 0
   450  000050                     vfprintf@fp:
   451                           	opt callstack 0
   452                           
   453                           ; 2 bytes @ 0x4F
   454  000050                     	ds	2
   455  000052                     vfprintf@fmt:
   456                           	opt callstack 0
   457                           
   458                           ; 2 bytes @ 0x51
   459  000052                     	ds	2
   460  000054                     vfprintf@ap:
   461                           	opt callstack 0
   462                           
   463                           ; 2 bytes @ 0x53
   464  000054                     	ds	2
   465  000056                     vfprintf@cfmt:
   466                           	opt callstack 0
   467                           
   468                           ; 2 bytes @ 0x55
   469  000056                     	ds	2
   470  000058                     ?_sprintf:
   471                           	opt callstack 0
   472  000058                     sprintf@s:
   473                           	opt callstack 0
   474                           
   475                           ; 2 bytes @ 0x57
   476  000058                     	ds	2
   477  00005A                     sprintf@fmt:
   478                           	opt callstack 0
   479                           
   480                           ; 2 bytes @ 0x59
   481  00005A                     	ds	4
   482  00005E                     
   483                           ; 1 bytes @ 0x5D
   484 ;;
   485 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   486 ;;
   487 ;; *************** function _main *****************
   488 ;; Defined at:
   489 ;;		line 20 in file "lcd_sandbox.c"
   490 ;; Parameters:    Size  Location     Type
   491 ;;		None
   492 ;; Auto vars:     Size  Location     Type
   493 ;;  buffer         16   20[BANK0 ] unsigned char [16]
   494 ;;  msg            10   10[BANK0 ] unsigned char [10]
   495 ;;  i               2   36[BANK0 ] int 
   496 ;; Return value:  Size  Location     Type
   497 ;;                  1    wreg      void 
   498 ;; Registers used:
   499 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   500 ;; Tracked objects:
   501 ;;		On entry : 0/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   506 ;;      Locals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   508 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   509 ;;Total ram usage:       28 bytes
   510 ;; Hardware stack levels required when called:    8
   511 ;; This function calls:
   512 ;;		_LCD8init
   513 ;;		_LCD8send
   514 ;;		_sprintf
   515 ;; This function is called by:
   516 ;;		Startup code after reset
   517 ;; This function uses a non-reentrant model
   518 ;;
   519                           
   520                           	psect	text0
   521  001840                     __ptext0:
   522                           	opt callstack 0
   523  001840                     _main:
   524                           	opt callstack 23
   525                           
   526                           ;lcd_sandbox.c: 22: 
   527                           
   528                           ;incstack = 0
   529  001840  EE20  F0BC         	lfsr	2,main@F5215
   530  001844  EE10  F090         	lfsr	1,main@msg
   531  001848  0E09               	movlw	9
   532  00184A                     u1041:
   533  00184A  CFDB FFE3          	movff	plusw2,plusw1
   534  00184E  06E8               	decf	wreg,f,c
   535  001850  E2FC               	bc	u1041
   536                           
   537                           ;lcd_sandbox.c: 23: 
   538  001852  EC21  F00B         	call	_LCD8init	;wreg free
   539  001856  0E9A               	movlw	low main@buffer
   540  001858  6E58               	movwf	sprintf@s,c
   541  00185A  0E00               	movlw	high main@buffer
   542  00185C  6E59               	movwf	sprintf@s+1,c
   543  00185E  0E01               	movlw	low STR_1
   544  001860  6E5A               	movwf	sprintf@fmt,c
   545  001862  0E10               	movlw	high STR_1
   546  001864  6E5B               	movwf	sprintf@fmt+1,c
   547  001866  C0AA  F05C         	movff	main@i,?_sprintf+4
   548  00186A  C0AB  F05D         	movff	main@i+1,?_sprintf+5
   549  00186E  EC88  F00C         	call	_sprintf	;wreg free
   550  001872  0E00               	movlw	0
   551  001874  0100               	movlb	0	; () banked
   552  001876  6FAB               	movwf	(main@i+1)& (0+255),b
   553  001878  0E00               	movlw	0
   554  00187A  6FAA               	movwf	main@i& (0+255),b
   555  00187C  D00E               	goto	l1635
   556  00187E                     l1631:
   557                           
   558                           ; BSR set to: 0
   559  00187E  0E01               	movlw	1
   560  001880  6E06               	movwf	LCD8send@mode,c
   561  001882  0E9A               	movlw	low main@buffer
   562  001884  25AA               	addwf	main@i& (0+255),w,b
   563  001886  6ED9               	movwf	fsr2l,c
   564  001888  0E00               	movlw	high main@buffer
   565  00188A  21AB               	addwfc	(main@i+1)& (0+255),w,b
   566  00188C  6EDA               	movwf	fsr2h,c
   567  00188E  50DF               	movf	indf2,w,c
   568  001890  ECD0  F00C         	call	_LCD8send
   569  001894  0100               	movlb	0	; () banked
   570  001896  4BAA               	infsnz	main@i& (0+255),f,b
   571  001898  2BAB               	incf	(main@i+1)& (0+255),f,b
   572  00189A                     l1635:
   573                           
   574                           ; BSR set to: 0
   575  00189A  0E9A               	movlw	low main@buffer
   576  00189C  25AA               	addwf	main@i& (0+255),w,b
   577  00189E  6ED9               	movwf	fsr2l,c
   578  0018A0  0E00               	movlw	high main@buffer
   579  0018A2  21AB               	addwfc	(main@i+1)& (0+255),w,b
   580  0018A4  6EDA               	movwf	fsr2h,c
   581  0018A6  50DF               	movf	indf2,w,c
   582  0018A8  A4D8               	btfss	status,2,c
   583  0018AA  D7E9               	goto	l1631
   584                           
   585                           ; BSR set to: 0
   586                           
   587                           ; BSR set to: 0
   588  0018AC  0E00               	movlw	0
   589  0018AE  6E06               	movwf	LCD8send@mode,c
   590  0018B0  0E80               	movlw	128
   591  0018B2  ECD0  F00C         	call	_LCD8send
   592  0018B6  EF00  F000         	goto	start
   593  0018BA                     __end_of_main:
   594                           	opt callstack 0
   595                           
   596 ;; *************** function _sprintf *****************
   597 ;; Defined at:
   598 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_sprintf.c"
   599 ;; Parameters:    Size  Location     Type
   600 ;;  s               2   87[COMRAM] PTR unsigned char 
   601 ;;		 -> main@buffer(16), 
   602 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   603 ;;		 -> STR_1(15), 
   604 ;; Auto vars:     Size  Location     Type
   605 ;;  f               6    4[BANK0 ] struct _IO_FILE
   606 ;;  ap              2    2[BANK0 ] PTR void [1]
   607 ;;		 -> ?_sprintf(2), 
   608 ;;  ret             2    0        int 
   609 ;; Return value:  Size  Location     Type
   610 ;;                  2   87[COMRAM] int 
   611 ;; Registers used:
   612 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   618 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   619 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   621 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   622 ;;Total ram usage:       16 bytes
   623 ;; Hardware stack levels used:    1
   624 ;; Hardware stack levels required when called:    7
   625 ;; This function calls:
   626 ;;		_vfprintf
   627 ;; This function is called by:
   628 ;;		_main
   629 ;; This function uses a non-reentrant model
   630 ;;
   631                           
   632                           	psect	text1
   633  001910                     __ptext1:
   634                           	opt callstack 0
   635  001910                     _sprintf:
   636                           	opt callstack 23
   637                           
   638                           ;incstack = 0
   639  001910  0E5C               	movlw	low (?_sprintf+4)
   640  001912  0100               	movlb	0	; () banked
   641  001914  6F88               	movwf	sprintf@ap& (0+255),b
   642  001916  0E00               	movlw	high (?_sprintf+4)
   643  001918  6F89               	movwf	(sprintf@ap+1)& (0+255),b
   644  00191A  C058  F08A         	movff	sprintf@s,sprintf@f
   645  00191E  C059  F08B         	movff	sprintf@s+1,sprintf@f+1
   646                           
   647                           ; BSR set to: 0
   648  001922  0E00               	movlw	0
   649  001924  6F8D               	movwf	(sprintf@f+3)& (0+255),b
   650  001926  0E00               	movlw	0
   651  001928  6F8C               	movwf	(sprintf@f+2)& (0+255),b
   652                           
   653                           ; BSR set to: 0
   654  00192A  0E00               	movlw	0
   655  00192C  6F8F               	movwf	(sprintf@f+5)& (0+255),b
   656  00192E  0E00               	movlw	0
   657  001930  6F8E               	movwf	(sprintf@f+4)& (0+255),b
   658                           
   659                           ; BSR set to: 0
   660  001932  0E8A               	movlw	low sprintf@f
   661  001934  6E50               	movwf	vfprintf@fp,c
   662  001936  0E00               	movlw	high sprintf@f
   663  001938  6E51               	movwf	vfprintf@fp+1,c
   664  00193A  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
   665  00193E  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
   666  001942  0E88               	movlw	low sprintf@ap
   667  001944  6E54               	movwf	vfprintf@ap,c
   668  001946  0E00               	movlw	high sprintf@ap
   669  001948  6E55               	movwf	vfprintf@ap+1,c
   670  00194A  EC5D  F00C         	call	_vfprintf	;wreg free
   671  00194E  0100               	movlb	0	; () banked
   672  001950  518C               	movf	(sprintf@f+2)& (0+255),w,b
   673  001952  2458               	addwf	sprintf@s,w,c
   674  001954  6ED9               	movwf	fsr2l,c
   675  001956  518D               	movf	(sprintf@f+3)& (0+255),w,b
   676  001958  2059               	addwfc	sprintf@s+1,w,c
   677  00195A  6EDA               	movwf	fsr2h,c
   678  00195C  0E00               	movlw	0
   679  00195E  6EDF               	movwf	indf2,c
   680                           
   681                           ; BSR set to: 0
   682  001960  0012               	return		;funcret
   683  001962                     __end_of_sprintf:
   684                           	opt callstack 0
   685                           
   686 ;; *************** function _vfprintf *****************
   687 ;; Defined at:
   688 ;;		line 1368 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
   689 ;; Parameters:    Size  Location     Type
   690 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   691 ;;		 -> sprintf@f(6), 
   692 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   693 ;;		 -> STR_1(15), 
   694 ;;  ap              2   83[COMRAM] PTR PTR void 
   695 ;;		 -> sprintf@ap(2), 
   696 ;; Auto vars:     Size  Location     Type
   697 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   698 ;;		 -> STR_1(15), 
   699 ;; Return value:  Size  Location     Type
   700 ;;                  2   79[COMRAM] int 
   701 ;; Registers used:
   702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   708 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   709 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   711 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   712 ;;Total ram usage:        8 bytes
   713 ;; Hardware stack levels used:    1
   714 ;; Hardware stack levels required when called:    6
   715 ;; This function calls:
   716 ;;		_vfpfcnvrt
   717 ;; This function is called by:
   718 ;;		_sprintf
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text2
   723  0018BA                     __ptext2:
   724                           	opt callstack 0
   725  0018BA                     _vfprintf:
   726                           	opt callstack 23
   727                           
   728                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 1369: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt
      +                          .c: 1371:     char *cfmt;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprn
      +                          t.c: 1373:     cfmt = (char *)fmt;
   729                           
   730                           ; BSR set to: 0
   731                           ;incstack = 0
   732  0018BA  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   733  0018BE  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   734                           
   735                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
   736  0018C2  0E00               	movlw	0
   737  0018C4  0100               	movlb	0	; () banked
   738  0018C6  6F61               	movwf	(_nout+1)& (0+255),b
   739  0018C8  0E00               	movlw	0
   740  0018CA  6F60               	movwf	_nout& (0+255),b
   741                           
   742                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
   743  0018CC  D013               	goto	l1565
   744  0018CE                     l1563:
   745                           
   746                           ; BSR set to: 0
   747                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1376:         nout +
      +                          = vfpfcnvrt(fp, &cfmt, ap);
   748  0018CE  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   749  0018D2  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   750  0018D6  0E56               	movlw	low vfprintf@cfmt
   751  0018D8  6E42               	movwf	vfpfcnvrt@fmt,c
   752  0018DA  0E00               	movlw	high vfprintf@cfmt
   753  0018DC  6E43               	movwf	vfpfcnvrt@fmt+1,c
   754  0018DE  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   755  0018E2  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   756  0018E6  EC2A  F009         	call	_vfpfcnvrt	;wreg free
   757  0018EA  5040               	movf	?_vfpfcnvrt,w,c
   758  0018EC  0100               	movlb	0	; () banked
   759  0018EE  2760               	addwf	_nout& (0+255),f,b
   760  0018F0  5041               	movf	?_vfpfcnvrt+1,w,c
   761  0018F2  2361               	addwfc	(_nout+1)& (0+255),f,b
   762  0018F4                     l1565:
   763                           
   764                           ; BSR set to: 0
   765                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
   766  0018F4  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   767  0018F8  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   768  0018FC                     	if	0	;tblptru may be non-zero
   769  0018FC                     	endif
   770  0018FC                     	if	0	;tblptru may be non-zero
   771  0018FC                     	endif
   772  0018FC  0008               	tblrd		*
   773  0018FE  50F5               	movf	tablat,w,c
   774  001900  0900               	iorlw	0
   775  001902  A4D8               	btfss	status,2,c
   776  001904  D7E4               	goto	l1563
   777                           
   778                           ; BSR set to: 0
   779                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1378:     return nou
      +                          t;
   780  001906  C060  F050         	movff	_nout,?_vfprintf
   781  00190A  C061  F051         	movff	_nout+1,?_vfprintf+1
   782                           
   783                           ; BSR set to: 0
   784  00190E  0012               	return		;funcret
   785  001910                     __end_of_vfprintf:
   786                           	opt callstack 0
   787                           
   788 ;; *************** function _vfpfcnvrt *****************
   789 ;; Defined at:
   790 ;;		line 670 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   793 ;;		 -> sprintf@f(6), 
   794 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   795 ;;		 -> vfprintf@cfmt(2), 
   796 ;;  ap              2   67[COMRAM] PTR PTR void 
   797 ;;		 -> sprintf@ap(2), 
   798 ;; Auto vars:     Size  Location     Type
   799 ;;  ll              8   71[COMRAM] long long 
   800 ;;  llu             8    0        unsigned long long 
   801 ;;  f               4    0        unsigned long long 
   802 ;;  vp              3    0        PTR void 
   803 ;;  ct              3    0        unsigned char [3]
   804 ;;  cp              3    0        PTR unsigned char 
   805 ;;  i               2    0        int 
   806 ;;  done            2    0        int 
   807 ;;  c               1    0        unsigned char 
   808 ;; Return value:  Size  Location     Type
   809 ;;                  2   63[COMRAM] int 
   810 ;; Registers used:
   811 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   817 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   818 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   819 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   820 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   821 ;;Total ram usage:       16 bytes
   822 ;; Hardware stack levels used:    1
   823 ;; Hardware stack levels required when called:    5
   824 ;; This function calls:
   825 ;;		_dtoa
   826 ;;		_fputc
   827 ;; This function is called by:
   828 ;;		_vfprintf
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832                           	psect	text3
   833  001254                     __ptext3:
   834                           	opt callstack 0
   835  001254                     _vfpfcnvrt:
   836                           	opt callstack 23
   837                           
   838                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 670: static int vfpf
      +                          cnvrt(FILE *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c
      +                          99/common/doprnt.c: 671: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 672:     char c, *cp, ct[3];;/Applications/microchip/xc8/v2.05/pic/sources/c99/com
      +                          mon/doprnt.c: 673:     int done, i;;/Applications/microchip/xc8/v2.05/pic/sources/c99/co
      +                          mmon/doprnt.c: 674:     long long ll;;/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 675:     unsigned long long llu;
   839                           
   840                           ; BSR set to: 0
   841                           ;incstack = 0
   842  001254  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   843  001258  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   844  00125C  CFDE FFF6          	movff	postinc2,tblptrl
   845  001260  CFDD FFF7          	movff	postdec2,tblptrh
   846  001264                     	if	0	;tblptru may be non-zero
   847  001264                     	endif
   848  001264                     	if	0	;tblptru may be non-zero
   849  001264                     	endif
   850  001264  0008               	tblrd		*
   851  001266  50F5               	movf	tablat,w,c
   852  001268  0A25               	xorlw	37
   853  00126A  A4D8               	btfss	status,2,c
   854  00126C  D09A               	goto	l1541
   855                           
   856                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
   857  00126E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   858  001272  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   859  001276  2ADE               	incf	postinc2,f,c
   860  001278  0E00               	movlw	0
   861  00127A  22DD               	addwfc	postdec2,f,c
   862                           
   863                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 683:         flags =
      +                           width = 0;
   864  00127C  0E00               	movlw	0
   865  00127E  0100               	movlb	0	; () banked
   866  001280  6F63               	movwf	(_width+1)& (0+255),b
   867  001282  0E00               	movlw	0
   868  001284  6F62               	movwf	_width& (0+255),b
   869  001286  C062  F05E         	movff	_width,_flags
   870  00128A  C063  F05F         	movff	_width+1,_flags+1
   871                           
   872                           ; BSR set to: 0
   873                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 684:         prec = 
      +                          -1;
   874  00128E  6964               	setf	_prec& (0+255),b
   875  001290  6965               	setf	(_prec+1)& (0+255),b
   876                           
   877                           ; BSR set to: 0
   878                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 825:         if ((*f
      +                          mt[0] == 'd') || (*fmt[0] == 'i')) {
   879  001292  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   880  001296  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   881  00129A  CFDE FFF6          	movff	postinc2,tblptrl
   882  00129E  CFDD FFF7          	movff	postdec2,tblptrh
   883  0012A2                     	if	0	;tblptru may be non-zero
   884  0012A2                     	endif
   885  0012A2                     	if	0	;tblptru may be non-zero
   886  0012A2                     	endif
   887  0012A2  0008               	tblrd		*
   888  0012A4  50F5               	movf	tablat,w,c
   889  0012A6  0A64               	xorlw	100
   890  0012A8  B4D8               	btfsc	status,2,c
   891  0012AA  D00D               	goto	u1000
   892                           
   893                           ; BSR set to: 0
   894  0012AC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   895  0012B0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   896  0012B4  CFDE FFF6          	movff	postinc2,tblptrl
   897  0012B8  CFDD FFF7          	movff	postdec2,tblptrh
   898  0012BC                     	if	0	;tblptru may be non-zero
   899  0012BC                     	endif
   900  0012BC                     	if	0	;tblptru may be non-zero
   901  0012BC                     	endif
   902  0012BC  0008               	tblrd		*
   903  0012BE  50F5               	movf	tablat,w,c
   904  0012C0  0A69               	xorlw	105
   905  0012C2  A4D8               	btfss	status,2,c
   906  0012C4  D03F               	goto	l1525
   907  0012C6                     u1000:
   908                           
   909                           ; BSR set to: 0
   910                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 827:             ++*
      +                          fmt;
   911  0012C6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   912  0012CA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   913  0012CE  2ADE               	incf	postinc2,f,c
   914  0012D0  0E00               	movlw	0
   915  0012D2  22DD               	addwfc	postdec2,f,c
   916                           
   917                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 828:             ll 
      +                          = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
   918  0012D4  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   919  0012D8  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   920  0012DC  CFDF F046          	movff	indf2,??_vfpfcnvrt
   921  0012E0  0E02               	movlw	2
   922  0012E2  26DE               	addwf	postinc2,f,c
   923  0012E4  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
   924  0012E8  0E00               	movlw	0
   925  0012EA  22DD               	addwfc	postdec2,f,c
   926  0012EC  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
   927  0012F0  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   928  0012F4  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
   929  0012F8  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
   930  0012FC  0E00               	movlw	0
   931  0012FE  BE49               	btfsc	vfpfcnvrt@ll+1,7,c
   932  001300  0EFF               	movlw	-1
   933  001302  6E4A               	movwf	vfpfcnvrt@ll+2,c
   934  001304  6E4B               	movwf	vfpfcnvrt@ll+3,c
   935  001306  6E4C               	movwf	vfpfcnvrt@ll+4,c
   936  001308  6E4D               	movwf	vfpfcnvrt@ll+5,c
   937  00130A  6E4E               	movwf	vfpfcnvrt@ll+6,c
   938  00130C  6E4F               	movwf	vfpfcnvrt@ll+7,c
   939                           
   940                           ; BSR set to: 0
   941                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 830:             ret
      +                          urn dtoa(fp, ll);
   942  00130E  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
   943  001312  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
   944  001316  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
   945  00131A  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
   946  00131E  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
   947  001322  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
   948  001326  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
   949  00132A  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
   950  00132E  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
   951  001332  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
   952  001336  EC09  F008         	call	_dtoa	;wreg free
   953  00133A  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
   954  00133E  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
   955  001342  0012               	return	
   956  001344                     l1525:
   957                           
   958                           ; BSR set to: 0
   959                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1350:         if ((*
      +                          fmt)[0] == '%') {
   960  001344  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   961  001348  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   962  00134C  CFDE FFF6          	movff	postinc2,tblptrl
   963  001350  CFDD FFF7          	movff	postdec2,tblptrh
   964  001354                     	if	0	;tblptru may be non-zero
   965  001354                     	endif
   966  001354                     	if	0	;tblptru may be non-zero
   967  001354                     	endif
   968  001354  0008               	tblrd		*
   969  001356  50F5               	movf	tablat,w,c
   970  001358  0A25               	xorlw	37
   971  00135A  A4D8               	btfss	status,2,c
   972  00135C  D016               	goto	l1535
   973                           
   974                           ; BSR set to: 0
   975                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1351:             ++
      +                          *fmt;
   976  00135E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   977  001362  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   978  001366  2ADE               	incf	postinc2,f,c
   979  001368  0E00               	movlw	0
   980  00136A  22DD               	addwfc	postdec2,f,c
   981                           
   982                           ; BSR set to: 0
   983                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1352:             fp
      +                          utc((int)'%', fp);
   984  00136C  0E00               	movlw	0
   985  00136E  6E02               	movwf	fputc@c+1,c
   986  001370  0E25               	movlw	37
   987  001372  6E01               	movwf	fputc@c,c
   988  001374  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
   989  001378  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   990  00137C  EC85  F00B         	call	_fputc	;wreg free
   991  001380                     l1531:
   992                           
   993                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1353:             re
      +                          turn 1;
   994  001380  0E00               	movlw	0
   995  001382  6E41               	movwf	?_vfpfcnvrt+1,c
   996  001384  0E01               	movlw	1
   997  001386  6E40               	movwf	?_vfpfcnvrt,c
   998  001388  0012               	return	
   999  00138A                     l1535:
  1000                           
  1001                           ; BSR set to: 0
  1002                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt
      +                          ;
  1003  00138A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1004  00138E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1005  001392  2ADE               	incf	postinc2,f,c
  1006  001394  0E00               	movlw	0
  1007  001396  22DD               	addwfc	postdec2,f,c
  1008                           
  1009                           ; BSR set to: 0
  1010                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1358:         return
      +                           0;
  1011  001398  0E00               	movlw	0
  1012  00139A  6E41               	movwf	?_vfpfcnvrt+1,c
  1013  00139C  0E00               	movlw	0
  1014  00139E  6E40               	movwf	?_vfpfcnvrt,c
  1015  0013A0  0012               	return	
  1016  0013A2                     l1541:
  1017                           
  1018                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1362:     fputc((int
      +                          )(*fmt)[0], fp);
  1019  0013A2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1020  0013A6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1021  0013AA  CFDE FFF6          	movff	postinc2,tblptrl
  1022  0013AE  CFDD FFF7          	movff	postdec2,tblptrh
  1023  0013B2                     	if	0	;tblptru may be non-zero
  1024  0013B2                     	endif
  1025  0013B2                     	if	0	;tblptru may be non-zero
  1026  0013B2                     	endif
  1027  0013B2  0008               	tblrd		*
  1028  0013B4  50F5               	movf	tablat,w,c
  1029  0013B6  6E01               	movwf	fputc@c,c
  1030  0013B8  6A02               	clrf	fputc@c+1,c
  1031  0013BA  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1032  0013BE  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1033  0013C2  EC85  F00B         	call	_fputc	;wreg free
  1034                           
  1035                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  1036  0013C6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1037  0013CA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1038  0013CE  2ADE               	incf	postinc2,f,c
  1039  0013D0  0E00               	movlw	0
  1040  0013D2  22DD               	addwfc	postdec2,f,c
  1041  0013D4  D7D5               	goto	l1531
  1042  0013D6                     __end_of_vfpfcnvrt:
  1043                           	opt callstack 0
  1044                           
  1045 ;; *************** function _dtoa *****************
  1046 ;; Defined at:
  1047 ;;		line 274 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1050 ;;		 -> sprintf@f(6), 
  1051 ;;  d               8   29[COMRAM] long long 
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;  n               8   53[COMRAM] long long 
  1054 ;;  i               2   61[COMRAM] int 
  1055 ;;  s               2   51[COMRAM] int 
  1056 ;;  w               2   49[COMRAM] int 
  1057 ;;  p               2   47[COMRAM] int 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  2   27[COMRAM] int 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1067 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1068 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1071 ;;Total ram usage:       36 bytes
  1072 ;; Hardware stack levels used:    1
  1073 ;; Hardware stack levels required when called:    4
  1074 ;; This function calls:
  1075 ;;		___aodiv
  1076 ;;		___aomod
  1077 ;;		_abs
  1078 ;;		_pad
  1079 ;; This function is called by:
  1080 ;;		_vfpfcnvrt
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084                           	psect	text4
  1085  001012                     __ptext4:
  1086                           	opt callstack 0
  1087  001012                     _dtoa:
  1088                           	opt callstack 23
  1089                           
  1090                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 274: static int dtoa
      +                          (FILE *fp, long long d);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.
      +                          c: 275: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 276:     in
      +                          t i, p, s, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 277:   
      +                            long long n;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 280:  
      +                             n = d;
  1091                           
  1092                           ;incstack = 0
  1093  001012  C01E  F036         	movff	dtoa@d,dtoa@n
  1094  001016  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1095  00101A  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1096  00101E  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1097  001022  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1098  001026  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1099  00102A  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1100  00102E  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1101                           
  1102                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ?
      +                           1 : 0;
  1103  001032  AE3D               	btfss	dtoa@n+7,7,c
  1104  001034  D002               	goto	u810
  1105  001036  0E01               	movlw	1
  1106  001038  D001               	goto	u820
  1107  00103A                     u810:
  1108  00103A  0E00               	movlw	0
  1109  00103C                     u820:
  1110  00103C  6E34               	movwf	dtoa@s,c
  1111  00103E  6A35               	clrf	dtoa@s+1,c
  1112                           
  1113                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 282:     if (s) {
  1114  001040  5034               	movf	dtoa@s,w,c
  1115  001042  1035               	iorwf	dtoa@s+1,w,c
  1116  001044  B4D8               	btfsc	status,2,c
  1117  001046  D010               	goto	l1439
  1118                           
  1119                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 283:         n = -n;
  1120  001048  1E3D               	comf	dtoa@n+7,f,c
  1121  00104A  1E3C               	comf	dtoa@n+6,f,c
  1122  00104C  1E3B               	comf	dtoa@n+5,f,c
  1123  00104E  1E3A               	comf	dtoa@n+4,f,c
  1124  001050  1E39               	comf	dtoa@n+3,f,c
  1125  001052  1E38               	comf	dtoa@n+2,f,c
  1126  001054  1E37               	comf	dtoa@n+1,f,c
  1127  001056  6C36               	negf	dtoa@n,c
  1128  001058  0E00               	movlw	0
  1129  00105A  2237               	addwfc	dtoa@n+1,f,c
  1130  00105C  2238               	addwfc	dtoa@n+2,f,c
  1131  00105E  2239               	addwfc	dtoa@n+3,f,c
  1132  001060  223A               	addwfc	dtoa@n+4,f,c
  1133  001062  223B               	addwfc	dtoa@n+5,f,c
  1134  001064  223C               	addwfc	dtoa@n+6,f,c
  1135  001066  223D               	addwfc	dtoa@n+7,f,c
  1136  001068                     l1439:
  1137                           
  1138                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 287:     if (!(prec 
      +                          < 0)) {
  1139  001068  0100               	movlb	0	; () banked
  1140  00106A  AF65               	btfss	(_prec+1)& (0+255),7,b
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 288:         flags &
      +                          = ~(1 << 1);
  1144  00106C  925E               	bcf	_flags,1,c
  1145                           
  1146                           ; BSR set to: 0
  1147                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 290:     p = (0 < pr
      +                          ec) ? prec : 1;
  1148  00106E  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1149  001070  D005               	goto	u850
  1150  001072  5165               	movf	(_prec+1)& (0+255),w,b
  1151  001074  E108               	bnz	l132
  1152  001076  0564               	decf	_prec& (0+255),w,b
  1153  001078  B0D8               	btfsc	status,0,c
  1154  00107A  D005               	goto	l132
  1155  00107C                     u850:
  1156                           
  1157                           ; BSR set to: 0
  1158  00107C  0E00               	movlw	0
  1159  00107E  6E31               	movwf	dtoa@p+1,c
  1160  001080  0E01               	movlw	1
  1161  001082  6E30               	movwf	dtoa@p,c
  1162  001084  D004               	goto	l134
  1163  001086                     l132:
  1164                           
  1165                           ; BSR set to: 0
  1166  001086  C064  F030         	movff	_prec,dtoa@p
  1167  00108A  C065  F031         	movff	_prec+1,dtoa@p+1
  1168  00108E                     l134:
  1169                           
  1170                           ; BSR set to: 0
  1171                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 291:     w = width;
  1172  00108E  C062  F032         	movff	_width,dtoa@w
  1173  001092  C063  F033         	movff	_width+1,dtoa@w+1
  1174                           
  1175                           ; BSR set to: 0
  1176                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 292:     if (s || (f
      +                          lags & (1 << 2))) {
  1177  001096  5034               	movf	dtoa@s,w,c
  1178  001098  1035               	iorwf	dtoa@s+1,w,c
  1179  00109A  A4D8               	btfss	status,2,c
  1180  00109C  D002               	goto	u870
  1181                           
  1182                           ; BSR set to: 0
  1183  00109E  A45E               	btfss	_flags,2,c
  1184  0010A0  D003               	goto	l1453
  1185  0010A2                     u870:
  1186                           
  1187                           ; BSR set to: 0
  1188                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 293:         --w;
  1189  0010A2  0632               	decf	dtoa@w,f,c
  1190  0010A4  A0D8               	btfss	status,0,c
  1191  0010A6  0633               	decf	dtoa@w+1,f,c
  1192  0010A8                     l1453:
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(
      +                          dbuf) - 1;
  1196  0010A8  0E00               	movlw	0
  1197  0010AA  6E3F               	movwf	dtoa@i+1,c
  1198  0010AC  0E1F               	movlw	31
  1199  0010AE  6E3E               	movwf	dtoa@i,c
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '
      +                          \0';
  1203  0010B0  0E00               	movlw	0
  1204  0010B2  6F85               	movwf	(_dbuf+31)& (0+255),b
  1205                           
  1206                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1207  0010B4  D07C               	goto	l1467
  1208  0010B6                     l1457:
  1209                           
  1210                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 300:         --i;
  1211  0010B6  063E               	decf	dtoa@i,f,c
  1212  0010B8  A0D8               	btfss	status,0,c
  1213  0010BA  063F               	decf	dtoa@i+1,f,c
  1214                           
  1215                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 301:         dbuf[i]
      +                           = '0' + abs(n % 10);
  1216  0010BC  0E66               	movlw	low _dbuf
  1217  0010BE  243E               	addwf	dtoa@i,w,c
  1218  0010C0  6ED9               	movwf	fsr2l,c
  1219  0010C2  0E00               	movlw	high _dbuf
  1220  0010C4  203F               	addwfc	dtoa@i+1,w,c
  1221  0010C6  6EDA               	movwf	fsr2h,c
  1222  0010C8  C036  F001         	movff	dtoa@n,___aomod@dividend
  1223  0010CC  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1224  0010D0  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1225  0010D4  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1226  0010D8  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1227  0010DC  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1228  0010E0  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1229  0010E4  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1230  0010E8  0E0A               	movlw	10
  1231  0010EA  6E09               	movwf	___aomod@divisor,c
  1232  0010EC  0E00               	movlw	0
  1233  0010EE  6E0A               	movwf	___aomod@divisor+1,c
  1234  0010F0  0E00               	movlw	0
  1235  0010F2  6E0B               	movwf	___aomod@divisor+2,c
  1236  0010F4  0E00               	movlw	0
  1237  0010F6  6E0C               	movwf	___aomod@divisor+3,c
  1238  0010F8  0E00               	movlw	0
  1239  0010FA  6E0D               	movwf	___aomod@divisor+4,c
  1240  0010FC  0E00               	movlw	0
  1241  0010FE  6E0E               	movwf	___aomod@divisor+5,c
  1242  001100  0E00               	movlw	0
  1243  001102  6E0F               	movwf	___aomod@divisor+6,c
  1244  001104  0E00               	movlw	0
  1245  001106  6E10               	movwf	___aomod@divisor+7,c
  1246  001108  EC8F  F00A         	call	___aomod	;wreg free
  1247  00110C  C001  F026         	movff	?___aomod,??_dtoa
  1248  001110  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1249  001114  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1250  001118  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1251  00111C  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1252  001120  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1253  001124  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1254  001128  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1255  00112C  C026  F013         	movff	??_dtoa,abs@a
  1256  001130  C028  F014         	movff	??_dtoa+2,abs@a+1
  1257  001134  EC23  F00D         	call	_abs	;wreg free
  1258  001138  5013               	movf	?_abs,w,c
  1259  00113A  0F30               	addlw	48
  1260  00113C  6EDF               	movwf	indf2,c
  1261                           
  1262                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 302:         --p;
  1263  00113E  0630               	decf	dtoa@p,f,c
  1264  001140  A0D8               	btfss	status,0,c
  1265  001142  0631               	decf	dtoa@p+1,f,c
  1266                           
  1267                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 303:         --w;
  1268  001144  0632               	decf	dtoa@w,f,c
  1269  001146  A0D8               	btfss	status,0,c
  1270  001148  0633               	decf	dtoa@w+1,f,c
  1271                           
  1272                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 304:         n = n /
      +                           10;
  1273  00114A  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1274  00114E  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1275  001152  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1276  001156  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1277  00115A  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1278  00115E  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1279  001162  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1280  001166  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1281  00116A  0E0A               	movlw	10
  1282  00116C  6E09               	movwf	___aodiv@divisor,c
  1283  00116E  0E00               	movlw	0
  1284  001170  6E0A               	movwf	___aodiv@divisor+1,c
  1285  001172  0E00               	movlw	0
  1286  001174  6E0B               	movwf	___aodiv@divisor+2,c
  1287  001176  0E00               	movlw	0
  1288  001178  6E0C               	movwf	___aodiv@divisor+3,c
  1289  00117A  0E00               	movlw	0
  1290  00117C  6E0D               	movwf	___aodiv@divisor+4,c
  1291  00117E  0E00               	movlw	0
  1292  001180  6E0E               	movwf	___aodiv@divisor+5,c
  1293  001182  0E00               	movlw	0
  1294  001184  6E0F               	movwf	___aodiv@divisor+6,c
  1295  001186  0E00               	movlw	0
  1296  001188  6E10               	movwf	___aodiv@divisor+7,c
  1297  00118A  ECEB  F009         	call	___aodiv	;wreg free
  1298  00118E  C001  F036         	movff	?___aodiv,dtoa@n
  1299  001192  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1300  001196  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1301  00119A  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1302  00119E  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1303  0011A2  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1304  0011A6  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1305  0011AA  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1306  0011AE                     l1467:
  1307                           
  1308                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1309  0011AE  BE3F               	btfsc	dtoa@i+1,7,c
  1310  0011B0  D01F               	goto	u920
  1311  0011B2  503F               	movf	dtoa@i+1,w,c
  1312  0011B4  E103               	bnz	u880
  1313  0011B6  043E               	decf	dtoa@i,w,c
  1314  0011B8  A0D8               	btfss	status,0,c
  1315  0011BA  D01A               	goto	u920
  1316  0011BC                     u880:
  1317  0011BC  5036               	movf	dtoa@n,w,c
  1318  0011BE  1037               	iorwf	dtoa@n+1,w,c
  1319  0011C0  1038               	iorwf	dtoa@n+2,w,c
  1320  0011C2  1039               	iorwf	dtoa@n+3,w,c
  1321  0011C4  103A               	iorwf	dtoa@n+4,w,c
  1322  0011C6  103B               	iorwf	dtoa@n+5,w,c
  1323  0011C8  103C               	iorwf	dtoa@n+6,w,c
  1324  0011CA  103D               	iorwf	dtoa@n+7,w,c
  1325  0011CC  A4D8               	btfss	status,2,c
  1326  0011CE  D773               	goto	l1457
  1327  0011D0  BE31               	btfsc	dtoa@p+1,7,c
  1328  0011D2  D005               	goto	u900
  1329  0011D4  5031               	movf	dtoa@p+1,w,c
  1330  0011D6  E102               	bnz	u901
  1331  0011D8  0430               	decf	dtoa@p,w,c
  1332  0011DA  B0D8               	btfsc	status,0,c
  1333  0011DC                     u901:
  1334  0011DC  D76C               	goto	l1457
  1335  0011DE                     u900:
  1336  0011DE  BE33               	btfsc	dtoa@w+1,7,c
  1337  0011E0  D007               	goto	u920
  1338  0011E2  5033               	movf	dtoa@w+1,w,c
  1339  0011E4  E103               	bnz	u910
  1340  0011E6  0432               	decf	dtoa@w,w,c
  1341  0011E8  A0D8               	btfss	status,0,c
  1342  0011EA  D002               	goto	u920
  1343  0011EC                     u910:
  1344  0011EC  B25E               	btfsc	_flags,1,c
  1345  0011EE  D763               	goto	l1457
  1346  0011F0                     u920:
  1347                           
  1348                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 308:     if (s || (f
      +                          lags & (1 << 2))) {
  1349  0011F0  5034               	movf	dtoa@s,w,c
  1350  0011F2  1035               	iorwf	dtoa@s+1,w,c
  1351  0011F4  A4D8               	btfss	status,2,c
  1352  0011F6  D002               	goto	u940
  1353  0011F8  A45E               	btfss	_flags,2,c
  1354  0011FA  D017               	goto	l1491
  1355  0011FC                     u940:
  1356                           
  1357                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 309:         --i;
  1358  0011FC  063E               	decf	dtoa@i,f,c
  1359  0011FE  A0D8               	btfss	status,0,c
  1360  001200  063F               	decf	dtoa@i+1,f,c
  1361                           
  1362                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 310:         dbuf[i]
      +                           = s ? '-' : '+';
  1363  001202  5034               	movf	dtoa@s,w,c
  1364  001204  1035               	iorwf	dtoa@s+1,w,c
  1365  001206  A4D8               	btfss	status,2,c
  1366  001208  D004               	goto	l1487
  1367  00120A  0E00               	movlw	0
  1368  00120C  6E2F               	movwf	_dtoa$200+1,c
  1369  00120E  0E2B               	movlw	43
  1370  001210  D003               	goto	L1
  1371  001212                     l1487:
  1372  001212  0E00               	movlw	0
  1373  001214  6E2F               	movwf	_dtoa$200+1,c
  1374  001216  0E2D               	movlw	45
  1375  001218                     L1:
  1376  001218  6E2E               	movwf	_dtoa$200,c
  1377  00121A  0E66               	movlw	low _dbuf
  1378  00121C  243E               	addwf	dtoa@i,w,c
  1379  00121E  6ED9               	movwf	fsr2l,c
  1380  001220  0E00               	movlw	high _dbuf
  1381  001222  203F               	addwfc	dtoa@i+1,w,c
  1382  001224  6EDA               	movwf	fsr2h,c
  1383  001226  C02E  FFDF         	movff	_dtoa$200,indf2
  1384  00122A                     l1491:
  1385                           
  1386                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 314:     return pad(
      +                          fp, &dbuf[i], w);
  1387  00122A  C01C  F011         	movff	dtoa@fp,pad@fp
  1388  00122E  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1389  001232  0E66               	movlw	low _dbuf
  1390  001234  243E               	addwf	dtoa@i,w,c
  1391  001236  6E13               	movwf	pad@buf,c
  1392  001238  0E00               	movlw	high _dbuf
  1393  00123A  203F               	addwfc	dtoa@i+1,w,c
  1394  00123C  6E14               	movwf	pad@buf+1,c
  1395  00123E  C032  F015         	movff	dtoa@w,pad@p
  1396  001242  C033  F016         	movff	dtoa@w+1,pad@p+1
  1397  001246  ECD5  F00B         	call	_pad	;wreg free
  1398  00124A  C011  F01C         	movff	?_pad,?_dtoa
  1399  00124E  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1400  001252  0012               	return		;funcret
  1401  001254                     __end_of_dtoa:
  1402                           	opt callstack 0
  1403                           
  1404 ;; *************** function _pad *****************
  1405 ;; Defined at:
  1406 ;;		line 72 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1409 ;;		 -> sprintf@f(6), 
  1410 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1411 ;;		 -> dbuf(32), 
  1412 ;;  p               2   20[COMRAM] int 
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;  w               2   25[COMRAM] int 
  1415 ;;  i               2   23[COMRAM] int 
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  2   16[COMRAM] int 
  1418 ;; Registers used:
  1419 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1425 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1426 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1427 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1428 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1429 ;;Total ram usage:       11 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; Hardware stack levels required when called:    3
  1432 ;; This function calls:
  1433 ;;		_fputc
  1434 ;;		_fputs
  1435 ;;		_strlen
  1436 ;; This function is called by:
  1437 ;;		_dtoa
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text5
  1442  0017AA                     __ptext5:
  1443                           	opt callstack 0
  1444  0017AA                     _pad:
  1445                           	opt callstack 23
  1446                           
  1447                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 72: static int pad(F
      +                          ILE *fp, char *buf, int p);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 73: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 74:     i
      +                          nt i, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 77:     if (
      +                          flags & (1 << 0)) {
  1448                           
  1449                           ;incstack = 0
  1450  0017AA  A05E               	btfss	_flags,0,c
  1451  0017AC  D00A               	goto	l1331
  1452                           
  1453                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 78:         fputs((c
      +                          onst char *)buf, fp);
  1454  0017AE  C013  F00A         	movff	pad@buf,fputs@s
  1455  0017B2  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1456  0017B6  C011  F00C         	movff	pad@fp,fputs@fp
  1457  0017BA  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1458  0017BE  ECED  F00C         	call	_fputs	;wreg free
  1459  0017C2                     l1331:
  1460                           
  1461                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) 
      +                          ? 0 : p;
  1462  0017C2  BE16               	btfsc	pad@p+1,7,c
  1463  0017C4  D005               	goto	l1335
  1464  0017C6  C015  F01A         	movff	pad@p,pad@w
  1465  0017CA  C016  F01B         	movff	pad@p+1,pad@w+1
  1466  0017CE  D004               	goto	l121
  1467  0017D0                     l1335:
  1468  0017D0  0E00               	movlw	0
  1469  0017D2  6E1B               	movwf	pad@w+1,c
  1470  0017D4  0E00               	movlw	0
  1471  0017D6  6E1A               	movwf	pad@w,c
  1472  0017D8                     l121:
  1473                           
  1474                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  1475  0017D8  0E00               	movlw	0
  1476  0017DA  6E19               	movwf	pad@i+1,c
  1477  0017DC  0E00               	movlw	0
  1478  0017DE  6E18               	movwf	pad@i,c
  1479                           
  1480                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  1481  0017E0  D00C               	goto	l1341
  1482  0017E2                     l1337:
  1483                           
  1484                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 85:         fputc(' 
      +                          ', fp);
  1485  0017E2  0E00               	movlw	0
  1486  0017E4  6E02               	movwf	fputc@c+1,c
  1487  0017E6  0E20               	movlw	32
  1488  0017E8  6E01               	movwf	fputc@c,c
  1489  0017EA  C011  F003         	movff	pad@fp,fputc@fp
  1490  0017EE  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1491  0017F2  EC85  F00B         	call	_fputc	;wreg free
  1492                           
  1493                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 86:         ++i;
  1494  0017F6  4A18               	infsnz	pad@i,f,c
  1495  0017F8  2A19               	incf	pad@i+1,f,c
  1496  0017FA                     l1341:
  1497                           
  1498                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  1499  0017FA  501A               	movf	pad@w,w,c
  1500  0017FC  5C18               	subwf	pad@i,w,c
  1501  0017FE  5019               	movf	pad@i+1,w,c
  1502  001800  0A80               	xorlw	128
  1503  001802  6E17               	movwf	??_pad& (0+255),c
  1504  001804  501B               	movf	pad@w+1,w,c
  1505  001806  0A80               	xorlw	128
  1506  001808  5817               	subwfb	??_pad& (0+255),w,c
  1507  00180A  A0D8               	btfss	status,0,c
  1508  00180C  D7EA               	goto	l1337
  1509                           
  1510                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 90:     if (!(flags 
      +                          & (1 << 0))) {
  1511  00180E  B05E               	btfsc	_flags,0,c
  1512  001810  D00A               	goto	l1345
  1513                           
  1514                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 91:         fputs((c
      +                          onst char *)buf, fp);
  1515  001812  C013  F00A         	movff	pad@buf,fputs@s
  1516  001816  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1517  00181A  C011  F00C         	movff	pad@fp,fputs@fp
  1518  00181E  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1519  001822  ECED  F00C         	call	_fputs	;wreg free
  1520  001826                     l1345:
  1521                           
  1522                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 94:     return strle
      +                          n(buf) + w;
  1523  001826  C013  F001         	movff	pad@buf,strlen@s
  1524  00182A  C014  F002         	movff	pad@buf+1,strlen@s+1
  1525  00182E  EC3C  F00D         	call	_strlen	;wreg free
  1526  001832  501A               	movf	pad@w,w,c
  1527  001834  2401               	addwf	?_strlen,w,c
  1528  001836  6E11               	movwf	?_pad,c
  1529  001838  501B               	movf	pad@w+1,w,c
  1530  00183A  2002               	addwfc	?_strlen+1,w,c
  1531  00183C  6E12               	movwf	?_pad+1,c
  1532  00183E  0012               	return		;funcret
  1533  001840                     __end_of_pad:
  1534                           	opt callstack 0
  1535                           
  1536 ;; *************** function _strlen *****************
  1537 ;; Defined at:
  1538 ;;		line 12 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/strlen.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1541 ;;		 -> dbuf(32), 
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1544 ;;		 -> dbuf(32), 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  2    0[COMRAM] unsigned int 
  1547 ;; Registers used:
  1548 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1554 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1555 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1557 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1558 ;;Total ram usage:        4 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; This function calls:
  1561 ;;		Nothing
  1562 ;; This function is called by:
  1563 ;;		_pad
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           	psect	text6
  1568  001A78                     __ptext6:
  1569                           	opt callstack 0
  1570  001A78                     _strlen:
  1571                           	opt callstack 25
  1572                           
  1573                           ;incstack = 0
  1574  001A78  C001  F003         	movff	strlen@s,strlen@a
  1575  001A7C  C002  F004         	movff	strlen@s+1,strlen@a+1
  1576  001A80  D002               	goto	l1321
  1577  001A82                     l1319:
  1578  001A82  4A01               	infsnz	strlen@s,f,c
  1579  001A84  2A02               	incf	strlen@s+1,f,c
  1580  001A86                     l1321:
  1581  001A86  C001  FFD9         	movff	strlen@s,fsr2l
  1582  001A8A  C002  FFDA         	movff	strlen@s+1,fsr2h
  1583  001A8E  50DF               	movf	indf2,w,c
  1584  001A90  A4D8               	btfss	status,2,c
  1585  001A92  D7F7               	goto	l1319
  1586  001A94  5003               	movf	strlen@a,w,c
  1587  001A96  5C01               	subwf	strlen@s,w,c
  1588  001A98  6E01               	movwf	?_strlen,c
  1589  001A9A  5004               	movf	strlen@a+1,w,c
  1590  001A9C  5802               	subwfb	strlen@s+1,w,c
  1591  001A9E  6E02               	movwf	?_strlen+1,c
  1592  001AA0  0012               	return		;funcret
  1593  001AA2                     __end_of_strlen:
  1594                           	opt callstack 0
  1595                           
  1596 ;; *************** function _fputs *****************
  1597 ;; Defined at:
  1598 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputs.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1601 ;;		 -> dbuf(32), 
  1602 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1603 ;;		 -> sprintf@f(6), 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  i               2   14[COMRAM] int 
  1606 ;;  c               1   13[COMRAM] unsigned char 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  2    9[COMRAM] int 
  1609 ;; Registers used:
  1610 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1616 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1617 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1619 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1620 ;;Total ram usage:        7 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    2
  1623 ;; This function calls:
  1624 ;;		_fputc
  1625 ;; This function is called by:
  1626 ;;		_pad
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text7
  1631  0019DA                     __ptext7:
  1632                           	opt callstack 0
  1633  0019DA                     _fputs:
  1634                           	opt callstack 23
  1635                           
  1636                           ;incstack = 0
  1637  0019DA  0E00               	movlw	0
  1638  0019DC  6E10               	movwf	fputs@i+1,c
  1639  0019DE  0E00               	movlw	0
  1640  0019E0  6E0F               	movwf	fputs@i,c
  1641  0019E2  D00B               	goto	l1315
  1642  0019E4                     l1311:
  1643  0019E4  C00E  F001         	movff	fputs@c,fputc@c
  1644  0019E8  6A02               	clrf	fputc@c+1,c
  1645  0019EA  C00C  F003         	movff	fputs@fp,fputc@fp
  1646  0019EE  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1647  0019F2  EC85  F00B         	call	_fputc	;wreg free
  1648  0019F6  4A0F               	infsnz	fputs@i,f,c
  1649  0019F8  2A10               	incf	fputs@i+1,f,c
  1650  0019FA                     l1315:
  1651  0019FA  500F               	movf	fputs@i,w,c
  1652  0019FC  240A               	addwf	fputs@s,w,c
  1653  0019FE  6ED9               	movwf	fsr2l,c
  1654  001A00  5010               	movf	fputs@i+1,w,c
  1655  001A02  200B               	addwfc	fputs@s+1,w,c
  1656  001A04  6EDA               	movwf	fsr2h,c
  1657  001A06  50DF               	movf	indf2,w,c
  1658  001A08  6E0E               	movwf	fputs@c,c
  1659  001A0A  500E               	movf	fputs@c,w,c
  1660  001A0C  B4D8               	btfsc	status,2,c
  1661  001A0E  0012               	return	
  1662  001A10  D7E9               	goto	l1311
  1663  001A12                     __end_of_fputs:
  1664                           	opt callstack 0
  1665                           
  1666 ;; *************** function _fputc *****************
  1667 ;; Defined at:
  1668 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputc.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;  c               2    0[COMRAM] int 
  1671 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1672 ;;		 -> sprintf@f(6), 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;		None
  1675 ;; Return value:  Size  Location     Type
  1676 ;;                  2    0[COMRAM] int 
  1677 ;; Registers used:
  1678 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1684 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1687 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1688 ;;Total ram usage:        9 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; Hardware stack levels required when called:    1
  1691 ;; This function calls:
  1692 ;;		_putch
  1693 ;; This function is called by:
  1694 ;;		_pad
  1695 ;;		_vfpfcnvrt
  1696 ;;		_fputs
  1697 ;; This function uses a non-reentrant model
  1698 ;;
  1699                           
  1700                           	psect	text8
  1701  00170A                     __ptext8:
  1702                           	opt callstack 0
  1703  00170A                     _fputc:
  1704                           	opt callstack 26
  1705                           
  1706                           ;incstack = 0
  1707  00170A  5003               	movf	fputc@fp,w,c
  1708  00170C  1004               	iorwf	fputc@fp+1,w,c
  1709  00170E  B4D8               	btfsc	status,2,c
  1710  001710  D004               	goto	u580
  1711  001712  5003               	movf	fputc@fp,w,c
  1712  001714  1004               	iorwf	fputc@fp+1,w,c
  1713  001716  A4D8               	btfss	status,2,c
  1714  001718  D004               	goto	l1301
  1715  00171A                     u580:
  1716  00171A  5001               	movf	fputc@c,w,c
  1717  00171C  EC73  F00D         	call	_putch
  1718  001720  0012               	return	
  1719  001722                     l1301:
  1720  001722  EE20 F004          	lfsr	2,4
  1721  001726  5003               	movf	fputc@fp,w,c
  1722  001728  26D9               	addwf	fsr2l,f,c
  1723  00172A  5004               	movf	fputc@fp+1,w,c
  1724  00172C  22DA               	addwfc	fsr2h,f,c
  1725  00172E  50DE               	movf	postinc2,w,c
  1726  001730  10DE               	iorwf	postinc2,w,c
  1727  001732  B4D8               	btfsc	status,2,c
  1728  001734  D016               	goto	u600
  1729  001736  EE20 F004          	lfsr	2,4
  1730  00173A  5003               	movf	fputc@fp,w,c
  1731  00173C  26D9               	addwf	fsr2l,f,c
  1732  00173E  5004               	movf	fputc@fp+1,w,c
  1733  001740  22DA               	addwfc	fsr2h,f,c
  1734  001742  EE10 F002          	lfsr	1,2
  1735  001746  5003               	movf	fputc@fp,w,c
  1736  001748  26E1               	addwf	fsr1l,f,c
  1737  00174A  5004               	movf	fputc@fp+1,w,c
  1738  00174C  22E2               	addwfc	fsr1h,f,c
  1739  00174E  50DE               	movf	postinc2,w,c
  1740  001750  5CE6               	subwf	postinc1,w,c
  1741  001752  50E6               	movf	postinc1,w,c
  1742  001754  0A80               	xorlw	128
  1743  001756  6E09               	movwf	(??_fputc+4)& (0+255),c
  1744  001758  50DE               	movf	postinc2,w,c
  1745  00175A  0A80               	xorlw	128
  1746  00175C  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  1747  00175E  B0D8               	btfsc	status,0,c
  1748  001760  0012               	return	
  1749  001762                     u600:
  1750  001762  EE20 F002          	lfsr	2,2
  1751  001766  5003               	movf	fputc@fp,w,c
  1752  001768  26D9               	addwf	fsr2l,f,c
  1753  00176A  5004               	movf	fputc@fp+1,w,c
  1754  00176C  22DA               	addwfc	fsr2h,f,c
  1755  00176E  CFDE F005          	movff	postinc2,??_fputc
  1756  001772  CFDD F006          	movff	postdec2,??_fputc+1
  1757  001776  C003  FFD9         	movff	fputc@fp,fsr2l
  1758  00177A  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1759  00177E  CFDE F007          	movff	postinc2,??_fputc+2
  1760  001782  CFDD F008          	movff	postdec2,??_fputc+3
  1761  001786  5005               	movf	??_fputc,w,c
  1762  001788  2407               	addwf	??_fputc+2,w,c
  1763  00178A  6ED9               	movwf	fsr2l,c
  1764  00178C  5006               	movf	??_fputc+1,w,c
  1765  00178E  2008               	addwfc	??_fputc+3,w,c
  1766  001790  6EDA               	movwf	fsr2h,c
  1767  001792  C001  FFDF         	movff	fputc@c,indf2
  1768  001796  EE20 F002          	lfsr	2,2
  1769  00179A  5003               	movf	fputc@fp,w,c
  1770  00179C  26D9               	addwf	fsr2l,f,c
  1771  00179E  5004               	movf	fputc@fp+1,w,c
  1772  0017A0  22DA               	addwfc	fsr2h,f,c
  1773  0017A2  2ADE               	incf	postinc2,f,c
  1774  0017A4  0E00               	movlw	0
  1775  0017A6  22DD               	addwfc	postdec2,f,c
  1776  0017A8  0012               	return		;funcret
  1777  0017AA                     __end_of_fputc:
  1778                           	opt callstack 0
  1779                           
  1780 ;; *************** function _putch *****************
  1781 ;; Defined at:
  1782 ;;		line 7 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/putch.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;  c               1    wreg     unsigned char 
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;  c               1    0[COMRAM] unsigned char 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      void 
  1789 ;; Registers used:
  1790 ;;		wreg
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;Total ram usage:        0 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; This function calls:
  1803 ;;		Nothing
  1804 ;; This function is called by:
  1805 ;;		_fputc
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text9
  1810  001AE6                     __ptext9:
  1811                           	opt callstack 0
  1812  001AE6                     _putch:
  1813                           	opt callstack 26
  1814                           
  1815                           ;incstack = 0
  1816  001AE6  0012               	return		;funcret
  1817  001AE8                     __end_of_putch:
  1818                           	opt callstack 0
  1819                           
  1820 ;; *************** function _abs *****************
  1821 ;; Defined at:
  1822 ;;		line 1 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/abs.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;  a               2   18[COMRAM] int 
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;		None
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  2   18[COMRAM] int 
  1829 ;; Registers used:
  1830 ;;		wreg, status,2, status,0
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1836 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1839 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1840 ;;Total ram usage:        4 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; This function calls:
  1843 ;;		Nothing
  1844 ;; This function is called by:
  1845 ;;		_dtoa
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text10
  1850  001A46                     __ptext10:
  1851                           	opt callstack 0
  1852  001A46                     _abs:
  1853                           	opt callstack 26
  1854                           
  1855                           ;incstack = 0
  1856  001A46  BE14               	btfsc	abs@a+1,7,c
  1857  001A48  D005               	goto	u670
  1858  001A4A  5014               	movf	abs@a+1,w,c
  1859  001A4C  E110               	bnz	l844
  1860  001A4E  0413               	decf	abs@a,w,c
  1861  001A50  B0D8               	btfsc	status,0,c
  1862  001A52  D00D               	goto	l844
  1863  001A54                     u670:
  1864  001A54  C013  F015         	movff	abs@a,??_abs
  1865  001A58  C014  F016         	movff	abs@a+1,??_abs+1
  1866  001A5C  1E15               	comf	??_abs,f,c
  1867  001A5E  1E16               	comf	??_abs+1,f,c
  1868  001A60  4A15               	infsnz	??_abs,f,c
  1869  001A62  2A16               	incf	??_abs+1,f,c
  1870  001A64  C015  F013         	movff	??_abs,?_abs
  1871  001A68  C016  F014         	movff	??_abs+1,?_abs+1
  1872  001A6C  0012               	return	
  1873  001A6E                     l844:
  1874  001A6E  C013  F013         	movff	abs@a,?_abs
  1875  001A72  C014  F014         	movff	abs@a+1,?_abs+1
  1876  001A76  0012               	return		;funcret
  1877  001A78                     __end_of_abs:
  1878                           	opt callstack 0
  1879                           
  1880 ;; *************** function ___aomod *****************
  1881 ;; Defined at:
  1882 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aomod.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;  dividend        8    0[COMRAM] long long 
  1885 ;;  divisor         8    8[COMRAM] long long 
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;  sign            1   17[COMRAM] unsigned char 
  1888 ;;  counter         1   16[COMRAM] unsigned char 
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  8    0[COMRAM] long long 
  1891 ;; Registers used:
  1892 ;;		wreg, status,2, status,0
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1898 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1899 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;Total ram usage:       18 bytes
  1903 ;; Hardware stack levels used:    1
  1904 ;; This function calls:
  1905 ;;		Nothing
  1906 ;; This function is called by:
  1907 ;;		_dtoa
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	text11
  1912  00151E                     __ptext11:
  1913                           	opt callstack 0
  1914  00151E                     ___aomod:
  1915                           	opt callstack 26
  1916                           
  1917                           ;incstack = 0
  1918  00151E  0E00               	movlw	0
  1919  001520  6E12               	movwf	___aomod@sign,c
  1920  001522  AE08               	btfss	___aomod@dividend+7,7,c
  1921  001524  D012               	goto	l1405
  1922  001526  1E08               	comf	___aomod@dividend+7,f,c
  1923  001528  1E07               	comf	___aomod@dividend+6,f,c
  1924  00152A  1E06               	comf	___aomod@dividend+5,f,c
  1925  00152C  1E05               	comf	___aomod@dividend+4,f,c
  1926  00152E  1E04               	comf	___aomod@dividend+3,f,c
  1927  001530  1E03               	comf	___aomod@dividend+2,f,c
  1928  001532  1E02               	comf	___aomod@dividend+1,f,c
  1929  001534  6C01               	negf	___aomod@dividend,c
  1930  001536  0E00               	movlw	0
  1931  001538  2202               	addwfc	___aomod@dividend+1,f,c
  1932  00153A  2203               	addwfc	___aomod@dividend+2,f,c
  1933  00153C  2204               	addwfc	___aomod@dividend+3,f,c
  1934  00153E  2205               	addwfc	___aomod@dividend+4,f,c
  1935  001540  2206               	addwfc	___aomod@dividend+5,f,c
  1936  001542  2207               	addwfc	___aomod@dividend+6,f,c
  1937  001544  2208               	addwfc	___aomod@dividend+7,f,c
  1938  001546  0E01               	movlw	1
  1939  001548  6E12               	movwf	___aomod@sign,c
  1940  00154A                     l1405:
  1941  00154A  AE10               	btfss	___aomod@divisor+7,7,c
  1942  00154C  D010               	goto	l1409
  1943  00154E  1E10               	comf	___aomod@divisor+7,f,c
  1944  001550  1E0F               	comf	___aomod@divisor+6,f,c
  1945  001552  1E0E               	comf	___aomod@divisor+5,f,c
  1946  001554  1E0D               	comf	___aomod@divisor+4,f,c
  1947  001556  1E0C               	comf	___aomod@divisor+3,f,c
  1948  001558  1E0B               	comf	___aomod@divisor+2,f,c
  1949  00155A  1E0A               	comf	___aomod@divisor+1,f,c
  1950  00155C  6C09               	negf	___aomod@divisor,c
  1951  00155E  0E00               	movlw	0
  1952  001560  220A               	addwfc	___aomod@divisor+1,f,c
  1953  001562  220B               	addwfc	___aomod@divisor+2,f,c
  1954  001564  220C               	addwfc	___aomod@divisor+3,f,c
  1955  001566  220D               	addwfc	___aomod@divisor+4,f,c
  1956  001568  220E               	addwfc	___aomod@divisor+5,f,c
  1957  00156A  220F               	addwfc	___aomod@divisor+6,f,c
  1958  00156C  2210               	addwfc	___aomod@divisor+7,f,c
  1959  00156E                     l1409:
  1960  00156E  5009               	movf	___aomod@divisor,w,c
  1961  001570  100A               	iorwf	___aomod@divisor+1,w,c
  1962  001572  100B               	iorwf	___aomod@divisor+2,w,c
  1963  001574  100C               	iorwf	___aomod@divisor+3,w,c
  1964  001576  100D               	iorwf	___aomod@divisor+4,w,c
  1965  001578  100E               	iorwf	___aomod@divisor+5,w,c
  1966  00157A  100F               	iorwf	___aomod@divisor+6,w,c
  1967  00157C  1010               	iorwf	___aomod@divisor+7,w,c
  1968  00157E  B4D8               	btfsc	status,2,c
  1969  001580  D03C               	goto	l1425
  1970  001582  0E01               	movlw	1
  1971  001584  6E11               	movwf	___aomod@counter,c
  1972  001586  D00A               	goto	l1415
  1973  001588                     l1413:
  1974  001588  90D8               	bcf	status,0,c
  1975  00158A  3609               	rlcf	___aomod@divisor,f,c
  1976  00158C  360A               	rlcf	___aomod@divisor+1,f,c
  1977  00158E  360B               	rlcf	___aomod@divisor+2,f,c
  1978  001590  360C               	rlcf	___aomod@divisor+3,f,c
  1979  001592  360D               	rlcf	___aomod@divisor+4,f,c
  1980  001594  360E               	rlcf	___aomod@divisor+5,f,c
  1981  001596  360F               	rlcf	___aomod@divisor+6,f,c
  1982  001598  3610               	rlcf	___aomod@divisor+7,f,c
  1983  00159A  2A11               	incf	___aomod@counter,f,c
  1984  00159C                     l1415:
  1985  00159C  AE10               	btfss	___aomod@divisor+7,7,c
  1986  00159E  D7F4               	goto	l1413
  1987  0015A0                     u780:
  1988  0015A0  5009               	movf	___aomod@divisor,w,c
  1989  0015A2  5C01               	subwf	___aomod@dividend,w,c
  1990  0015A4  500A               	movf	___aomod@divisor+1,w,c
  1991  0015A6  5802               	subwfb	___aomod@dividend+1,w,c
  1992  0015A8  500B               	movf	___aomod@divisor+2,w,c
  1993  0015AA  5803               	subwfb	___aomod@dividend+2,w,c
  1994  0015AC  500C               	movf	___aomod@divisor+3,w,c
  1995  0015AE  5804               	subwfb	___aomod@dividend+3,w,c
  1996  0015B0  500D               	movf	___aomod@divisor+4,w,c
  1997  0015B2  5805               	subwfb	___aomod@dividend+4,w,c
  1998  0015B4  500E               	movf	___aomod@divisor+5,w,c
  1999  0015B6  5806               	subwfb	___aomod@dividend+5,w,c
  2000  0015B8  500F               	movf	___aomod@divisor+6,w,c
  2001  0015BA  5807               	subwfb	___aomod@dividend+6,w,c
  2002  0015BC  5010               	movf	___aomod@divisor+7,w,c
  2003  0015BE  5808               	subwfb	___aomod@dividend+7,w,c
  2004  0015C0  A0D8               	btfss	status,0,c
  2005  0015C2  D010               	goto	l1421
  2006  0015C4  5009               	movf	___aomod@divisor,w,c
  2007  0015C6  5E01               	subwf	___aomod@dividend,f,c
  2008  0015C8  500A               	movf	___aomod@divisor+1,w,c
  2009  0015CA  5A02               	subwfb	___aomod@dividend+1,f,c
  2010  0015CC  500B               	movf	___aomod@divisor+2,w,c
  2011  0015CE  5A03               	subwfb	___aomod@dividend+2,f,c
  2012  0015D0  500C               	movf	___aomod@divisor+3,w,c
  2013  0015D2  5A04               	subwfb	___aomod@dividend+3,f,c
  2014  0015D4  500D               	movf	___aomod@divisor+4,w,c
  2015  0015D6  5A05               	subwfb	___aomod@dividend+4,f,c
  2016  0015D8  500E               	movf	___aomod@divisor+5,w,c
  2017  0015DA  5A06               	subwfb	___aomod@dividend+5,f,c
  2018  0015DC  500F               	movf	___aomod@divisor+6,w,c
  2019  0015DE  5A07               	subwfb	___aomod@dividend+6,f,c
  2020  0015E0  5010               	movf	___aomod@divisor+7,w,c
  2021  0015E2  5A08               	subwfb	___aomod@dividend+7,f,c
  2022  0015E4                     l1421:
  2023  0015E4  90D8               	bcf	status,0,c
  2024  0015E6  3210               	rrcf	___aomod@divisor+7,f,c
  2025  0015E8  320F               	rrcf	___aomod@divisor+6,f,c
  2026  0015EA  320E               	rrcf	___aomod@divisor+5,f,c
  2027  0015EC  320D               	rrcf	___aomod@divisor+4,f,c
  2028  0015EE  320C               	rrcf	___aomod@divisor+3,f,c
  2029  0015F0  320B               	rrcf	___aomod@divisor+2,f,c
  2030  0015F2  320A               	rrcf	___aomod@divisor+1,f,c
  2031  0015F4  3209               	rrcf	___aomod@divisor,f,c
  2032  0015F6  2E11               	decfsz	___aomod@counter,f,c
  2033  0015F8  D7D3               	goto	u780
  2034  0015FA                     l1425:
  2035  0015FA  5012               	movf	___aomod@sign,w,c
  2036  0015FC  B4D8               	btfsc	status,2,c
  2037  0015FE  D010               	goto	l1429
  2038  001600  1E08               	comf	___aomod@dividend+7,f,c
  2039  001602  1E07               	comf	___aomod@dividend+6,f,c
  2040  001604  1E06               	comf	___aomod@dividend+5,f,c
  2041  001606  1E05               	comf	___aomod@dividend+4,f,c
  2042  001608  1E04               	comf	___aomod@dividend+3,f,c
  2043  00160A  1E03               	comf	___aomod@dividend+2,f,c
  2044  00160C  1E02               	comf	___aomod@dividend+1,f,c
  2045  00160E  6C01               	negf	___aomod@dividend,c
  2046  001610  0E00               	movlw	0
  2047  001612  2202               	addwfc	___aomod@dividend+1,f,c
  2048  001614  2203               	addwfc	___aomod@dividend+2,f,c
  2049  001616  2204               	addwfc	___aomod@dividend+3,f,c
  2050  001618  2205               	addwfc	___aomod@dividend+4,f,c
  2051  00161A  2206               	addwfc	___aomod@dividend+5,f,c
  2052  00161C  2207               	addwfc	___aomod@dividend+6,f,c
  2053  00161E  2208               	addwfc	___aomod@dividend+7,f,c
  2054  001620                     l1429:
  2055  001620  C001  F001         	movff	___aomod@dividend,?___aomod
  2056  001624  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2057  001628  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2058  00162C  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2059  001630  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2060  001634  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2061  001638  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2062  00163C  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2063  001640  0012               	return		;funcret
  2064  001642                     __end_of___aomod:
  2065                           	opt callstack 0
  2066                           
  2067 ;; *************** function ___aodiv *****************
  2068 ;; Defined at:
  2069 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aodiv.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;  dividend        8    0[COMRAM] long long 
  2072 ;;  divisor         8    8[COMRAM] long long 
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;  quotient        8   18[COMRAM] long long 
  2075 ;;  sign            1   17[COMRAM] unsigned char 
  2076 ;;  counter         1   16[COMRAM] unsigned char 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  8    0[COMRAM] long long 
  2079 ;; Registers used:
  2080 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2086 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;Total ram usage:       26 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; This function calls:
  2093 ;;		Nothing
  2094 ;; This function is called by:
  2095 ;;		_dtoa
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text12
  2100  0013D6                     __ptext12:
  2101                           	opt callstack 0
  2102  0013D6                     ___aodiv:
  2103                           	opt callstack 26
  2104                           
  2105                           ;incstack = 0
  2106  0013D6  0E00               	movlw	0
  2107  0013D8  6E12               	movwf	___aodiv@sign,c
  2108  0013DA  AE10               	btfss	___aodiv@divisor+7,7,c
  2109  0013DC  D012               	goto	l1361
  2110  0013DE  1E10               	comf	___aodiv@divisor+7,f,c
  2111  0013E0  1E0F               	comf	___aodiv@divisor+6,f,c
  2112  0013E2  1E0E               	comf	___aodiv@divisor+5,f,c
  2113  0013E4  1E0D               	comf	___aodiv@divisor+4,f,c
  2114  0013E6  1E0C               	comf	___aodiv@divisor+3,f,c
  2115  0013E8  1E0B               	comf	___aodiv@divisor+2,f,c
  2116  0013EA  1E0A               	comf	___aodiv@divisor+1,f,c
  2117  0013EC  6C09               	negf	___aodiv@divisor,c
  2118  0013EE  0E00               	movlw	0
  2119  0013F0  220A               	addwfc	___aodiv@divisor+1,f,c
  2120  0013F2  220B               	addwfc	___aodiv@divisor+2,f,c
  2121  0013F4  220C               	addwfc	___aodiv@divisor+3,f,c
  2122  0013F6  220D               	addwfc	___aodiv@divisor+4,f,c
  2123  0013F8  220E               	addwfc	___aodiv@divisor+5,f,c
  2124  0013FA  220F               	addwfc	___aodiv@divisor+6,f,c
  2125  0013FC  2210               	addwfc	___aodiv@divisor+7,f,c
  2126  0013FE  0E01               	movlw	1
  2127  001400  6E12               	movwf	___aodiv@sign,c
  2128  001402                     l1361:
  2129  001402  AE08               	btfss	___aodiv@dividend+7,7,c
  2130  001404  D012               	goto	l1367
  2131  001406  1E08               	comf	___aodiv@dividend+7,f,c
  2132  001408  1E07               	comf	___aodiv@dividend+6,f,c
  2133  00140A  1E06               	comf	___aodiv@dividend+5,f,c
  2134  00140C  1E05               	comf	___aodiv@dividend+4,f,c
  2135  00140E  1E04               	comf	___aodiv@dividend+3,f,c
  2136  001410  1E03               	comf	___aodiv@dividend+2,f,c
  2137  001412  1E02               	comf	___aodiv@dividend+1,f,c
  2138  001414  6C01               	negf	___aodiv@dividend,c
  2139  001416  0E00               	movlw	0
  2140  001418  2202               	addwfc	___aodiv@dividend+1,f,c
  2141  00141A  2203               	addwfc	___aodiv@dividend+2,f,c
  2142  00141C  2204               	addwfc	___aodiv@dividend+3,f,c
  2143  00141E  2205               	addwfc	___aodiv@dividend+4,f,c
  2144  001420  2206               	addwfc	___aodiv@dividend+5,f,c
  2145  001422  2207               	addwfc	___aodiv@dividend+6,f,c
  2146  001424  2208               	addwfc	___aodiv@dividend+7,f,c
  2147  001426  0E01               	movlw	1
  2148  001428  1A12               	xorwf	___aodiv@sign,f,c
  2149  00142A                     l1367:
  2150  00142A  EE20  F013         	lfsr	2,___aodiv@quotient
  2151  00142E  0E07               	movlw	7
  2152  001430                     u701:
  2153  001430  6ADE               	clrf	postinc2,c
  2154  001432  06E8               	decf	wreg,f,c
  2155  001434  E2FD               	bc	u701
  2156  001436  5009               	movf	___aodiv@divisor,w,c
  2157  001438  100A               	iorwf	___aodiv@divisor+1,w,c
  2158  00143A  100B               	iorwf	___aodiv@divisor+2,w,c
  2159  00143C  100C               	iorwf	___aodiv@divisor+3,w,c
  2160  00143E  100D               	iorwf	___aodiv@divisor+4,w,c
  2161  001440  100E               	iorwf	___aodiv@divisor+5,w,c
  2162  001442  100F               	iorwf	___aodiv@divisor+6,w,c
  2163  001444  1010               	iorwf	___aodiv@divisor+7,w,c
  2164  001446  B4D8               	btfsc	status,2,c
  2165  001448  D046               	goto	l1389
  2166  00144A  0E01               	movlw	1
  2167  00144C  6E11               	movwf	___aodiv@counter,c
  2168  00144E  D00A               	goto	l1375
  2169  001450                     l1373:
  2170  001450  90D8               	bcf	status,0,c
  2171  001452  3609               	rlcf	___aodiv@divisor,f,c
  2172  001454  360A               	rlcf	___aodiv@divisor+1,f,c
  2173  001456  360B               	rlcf	___aodiv@divisor+2,f,c
  2174  001458  360C               	rlcf	___aodiv@divisor+3,f,c
  2175  00145A  360D               	rlcf	___aodiv@divisor+4,f,c
  2176  00145C  360E               	rlcf	___aodiv@divisor+5,f,c
  2177  00145E  360F               	rlcf	___aodiv@divisor+6,f,c
  2178  001460  3610               	rlcf	___aodiv@divisor+7,f,c
  2179  001462  2A11               	incf	___aodiv@counter,f,c
  2180  001464                     l1375:
  2181  001464  AE10               	btfss	___aodiv@divisor+7,7,c
  2182  001466  D7F4               	goto	l1373
  2183  001468                     u720:
  2184  001468  90D8               	bcf	status,0,c
  2185  00146A  3613               	rlcf	___aodiv@quotient,f,c
  2186  00146C  3614               	rlcf	___aodiv@quotient+1,f,c
  2187  00146E  3615               	rlcf	___aodiv@quotient+2,f,c
  2188  001470  3616               	rlcf	___aodiv@quotient+3,f,c
  2189  001472  3617               	rlcf	___aodiv@quotient+4,f,c
  2190  001474  3618               	rlcf	___aodiv@quotient+5,f,c
  2191  001476  3619               	rlcf	___aodiv@quotient+6,f,c
  2192  001478  361A               	rlcf	___aodiv@quotient+7,f,c
  2193  00147A  5009               	movf	___aodiv@divisor,w,c
  2194  00147C  5C01               	subwf	___aodiv@dividend,w,c
  2195  00147E  500A               	movf	___aodiv@divisor+1,w,c
  2196  001480  5802               	subwfb	___aodiv@dividend+1,w,c
  2197  001482  500B               	movf	___aodiv@divisor+2,w,c
  2198  001484  5803               	subwfb	___aodiv@dividend+2,w,c
  2199  001486  500C               	movf	___aodiv@divisor+3,w,c
  2200  001488  5804               	subwfb	___aodiv@dividend+3,w,c
  2201  00148A  500D               	movf	___aodiv@divisor+4,w,c
  2202  00148C  5805               	subwfb	___aodiv@dividend+4,w,c
  2203  00148E  500E               	movf	___aodiv@divisor+5,w,c
  2204  001490  5806               	subwfb	___aodiv@dividend+5,w,c
  2205  001492  500F               	movf	___aodiv@divisor+6,w,c
  2206  001494  5807               	subwfb	___aodiv@dividend+6,w,c
  2207  001496  5010               	movf	___aodiv@divisor+7,w,c
  2208  001498  5808               	subwfb	___aodiv@dividend+7,w,c
  2209  00149A  A0D8               	btfss	status,0,c
  2210  00149C  D011               	goto	l1385
  2211  00149E  5009               	movf	___aodiv@divisor,w,c
  2212  0014A0  5E01               	subwf	___aodiv@dividend,f,c
  2213  0014A2  500A               	movf	___aodiv@divisor+1,w,c
  2214  0014A4  5A02               	subwfb	___aodiv@dividend+1,f,c
  2215  0014A6  500B               	movf	___aodiv@divisor+2,w,c
  2216  0014A8  5A03               	subwfb	___aodiv@dividend+2,f,c
  2217  0014AA  500C               	movf	___aodiv@divisor+3,w,c
  2218  0014AC  5A04               	subwfb	___aodiv@dividend+3,f,c
  2219  0014AE  500D               	movf	___aodiv@divisor+4,w,c
  2220  0014B0  5A05               	subwfb	___aodiv@dividend+4,f,c
  2221  0014B2  500E               	movf	___aodiv@divisor+5,w,c
  2222  0014B4  5A06               	subwfb	___aodiv@dividend+5,f,c
  2223  0014B6  500F               	movf	___aodiv@divisor+6,w,c
  2224  0014B8  5A07               	subwfb	___aodiv@dividend+6,f,c
  2225  0014BA  5010               	movf	___aodiv@divisor+7,w,c
  2226  0014BC  5A08               	subwfb	___aodiv@dividend+7,f,c
  2227  0014BE  8013               	bsf	___aodiv@quotient,0,c
  2228  0014C0                     l1385:
  2229  0014C0  90D8               	bcf	status,0,c
  2230  0014C2  3210               	rrcf	___aodiv@divisor+7,f,c
  2231  0014C4  320F               	rrcf	___aodiv@divisor+6,f,c
  2232  0014C6  320E               	rrcf	___aodiv@divisor+5,f,c
  2233  0014C8  320D               	rrcf	___aodiv@divisor+4,f,c
  2234  0014CA  320C               	rrcf	___aodiv@divisor+3,f,c
  2235  0014CC  320B               	rrcf	___aodiv@divisor+2,f,c
  2236  0014CE  320A               	rrcf	___aodiv@divisor+1,f,c
  2237  0014D0  3209               	rrcf	___aodiv@divisor,f,c
  2238  0014D2  2E11               	decfsz	___aodiv@counter,f,c
  2239  0014D4  D7C9               	goto	u720
  2240  0014D6                     l1389:
  2241  0014D6  5012               	movf	___aodiv@sign,w,c
  2242  0014D8  B4D8               	btfsc	status,2,c
  2243  0014DA  D010               	goto	l1393
  2244  0014DC  1E1A               	comf	___aodiv@quotient+7,f,c
  2245  0014DE  1E19               	comf	___aodiv@quotient+6,f,c
  2246  0014E0  1E18               	comf	___aodiv@quotient+5,f,c
  2247  0014E2  1E17               	comf	___aodiv@quotient+4,f,c
  2248  0014E4  1E16               	comf	___aodiv@quotient+3,f,c
  2249  0014E6  1E15               	comf	___aodiv@quotient+2,f,c
  2250  0014E8  1E14               	comf	___aodiv@quotient+1,f,c
  2251  0014EA  6C13               	negf	___aodiv@quotient,c
  2252  0014EC  0E00               	movlw	0
  2253  0014EE  2214               	addwfc	___aodiv@quotient+1,f,c
  2254  0014F0  2215               	addwfc	___aodiv@quotient+2,f,c
  2255  0014F2  2216               	addwfc	___aodiv@quotient+3,f,c
  2256  0014F4  2217               	addwfc	___aodiv@quotient+4,f,c
  2257  0014F6  2218               	addwfc	___aodiv@quotient+5,f,c
  2258  0014F8  2219               	addwfc	___aodiv@quotient+6,f,c
  2259  0014FA  221A               	addwfc	___aodiv@quotient+7,f,c
  2260  0014FC                     l1393:
  2261  0014FC  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2262  001500  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2263  001504  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2264  001508  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2265  00150C  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2266  001510  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2267  001514  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2268  001518  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2269  00151C  0012               	return		;funcret
  2270  00151E                     __end_of___aodiv:
  2271                           	opt callstack 0
  2272                           
  2273 ;; *************** function _LCD8init *****************
  2274 ;; Defined at:
  2275 ;;		line 11 in file "LCD8.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;		None
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;		None
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      void 
  2282 ;; Registers used:
  2283 ;;		wreg, status,2, status,0, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;Total ram usage:        0 bytes
  2294 ;; Hardware stack levels used:    1
  2295 ;; Hardware stack levels required when called:    2
  2296 ;; This function calls:
  2297 ;;		_LCD8send
  2298 ;;		_delay_ms
  2299 ;; This function is called by:
  2300 ;;		_main
  2301 ;;		_main2
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           	psect	text13
  2306  001642                     __ptext13:
  2307                           	opt callstack 0
  2308  001642                     _LCD8init:
  2309                           	opt callstack 28
  2310                           
  2311                           ;LCD8.c: 13:  TRISE = 0x00;
  2312                           
  2313                           ;incstack = 0
  2314  001642  0E00               	movlw	0
  2315  001644  6E96               	movwf	3990,c	;volatile
  2316                           
  2317                           ;LCD8.c: 14:  TRISH = 0b11111000;
  2318  001646  0EF8               	movlw	248
  2319  001648  6E99               	movwf	3993,c	;volatile
  2320                           
  2321                           ;LCD8.c: 15:  LATHbits.LATH1 = 0;
  2322  00164A  9290               	bcf	3984,1,c	;volatile
  2323                           
  2324                           ;LCD8.c: 16:  LATHbits.LATH0 = 0;
  2325  00164C  9090               	bcf	3984,0,c	;volatile
  2326                           
  2327                           ;LCD8.c: 17:  LATHbits.LATH2 = 0;
  2328  00164E  9490               	bcf	3984,2,c	;volatile
  2329                           
  2330                           ;LCD8.c: 18:  delay_ms(200);
  2331  001650  0E00               	movlw	0
  2332  001652  6E02               	movwf	delay_ms@x+1,c
  2333  001654  0EC8               	movlw	200
  2334  001656  6E01               	movwf	delay_ms@x,c
  2335  001658  EC09  F00D         	call	_delay_ms	;wreg free
  2336                           
  2337                           ;LCD8.c: 20:  LCD8send(0x30,0);
  2338  00165C  0E00               	movlw	0
  2339  00165E  6E06               	movwf	LCD8send@mode,c
  2340  001660  0E30               	movlw	48
  2341  001662  ECD0  F00C         	call	_LCD8send
  2342                           
  2343                           ;LCD8.c: 21:  LCD8send(0x30,0);
  2344  001666  0E00               	movlw	0
  2345  001668  6E06               	movwf	LCD8send@mode,c
  2346  00166A  0E30               	movlw	48
  2347  00166C  ECD0  F00C         	call	_LCD8send
  2348                           
  2349                           ;LCD8.c: 22:  LCD8send(0x30,0);
  2350  001670  0E00               	movlw	0
  2351  001672  6E06               	movwf	LCD8send@mode,c
  2352  001674  0E30               	movlw	48
  2353  001676  ECD0  F00C         	call	_LCD8send
  2354                           
  2355                           ;LCD8.c: 23:  LCD8send(0x38,0);
  2356  00167A  0E00               	movlw	0
  2357  00167C  6E06               	movwf	LCD8send@mode,c
  2358  00167E  0E38               	movlw	56
  2359  001680  ECD0  F00C         	call	_LCD8send
  2360                           
  2361                           ;LCD8.c: 24:  LCD8send(0x10,0);
  2362  001684  0E00               	movlw	0
  2363  001686  6E06               	movwf	LCD8send@mode,c
  2364  001688  0E10               	movlw	16
  2365  00168A  ECD0  F00C         	call	_LCD8send
  2366                           
  2367                           ;LCD8.c: 25:  LCD8send(0x0F,0);
  2368  00168E  0E00               	movlw	0
  2369  001690  6E06               	movwf	LCD8send@mode,c
  2370  001692  0E0F               	movlw	15
  2371  001694  ECD0  F00C         	call	_LCD8send
  2372                           
  2373                           ;LCD8.c: 26:  LCD8send(0x06,0);
  2374  001698  0E00               	movlw	0
  2375  00169A  6E06               	movwf	LCD8send@mode,c
  2376  00169C  0E06               	movlw	6
  2377  00169E  ECD0  F00C         	call	_LCD8send
  2378                           
  2379                           ;LCD8.c: 27:  LCD8send(0x01,0);
  2380  0016A2  0E00               	movlw	0
  2381  0016A4  6E06               	movwf	LCD8send@mode,c
  2382  0016A6  0E01               	movlw	1
  2383  0016A8  ECD0  F00C         	call	_LCD8send
  2384                           
  2385                           ;LCD8.c: 28:  delay_ms(100);
  2386  0016AC  0E00               	movlw	0
  2387  0016AE  6E02               	movwf	delay_ms@x+1,c
  2388  0016B0  0E64               	movlw	100
  2389  0016B2  6E01               	movwf	delay_ms@x,c
  2390  0016B4  EC09  F00D         	call	_delay_ms	;wreg free
  2391                           
  2392                           ;LCD8.c: 30:  LCD8send(0x8A,0);
  2393  0016B8  0E00               	movlw	0
  2394  0016BA  6E06               	movwf	LCD8send@mode,c
  2395  0016BC  0E8A               	movlw	138
  2396  0016BE  ECD0  F00C         	call	_LCD8send
  2397                           
  2398                           ;LCD8.c: 32:  LCD8send('O',1);
  2399  0016C2  0E01               	movlw	1
  2400  0016C4  6E06               	movwf	LCD8send@mode,c
  2401  0016C6  0E4F               	movlw	79
  2402  0016C8  ECD0  F00C         	call	_LCD8send
  2403                           
  2404                           ;LCD8.c: 33:  LCD8send('l',1);
  2405  0016CC  0E01               	movlw	1
  2406  0016CE  6E06               	movwf	LCD8send@mode,c
  2407  0016D0  0E6C               	movlw	108
  2408  0016D2  ECD0  F00C         	call	_LCD8send
  2409                           
  2410                           ;LCD8.c: 34:  LCD8send('l',1);
  2411  0016D6  0E01               	movlw	1
  2412  0016D8  6E06               	movwf	LCD8send@mode,c
  2413  0016DA  0E6C               	movlw	108
  2414  0016DC  ECD0  F00C         	call	_LCD8send
  2415                           
  2416                           ;LCD8.c: 35:  LCD8send('e',1);
  2417  0016E0  0E01               	movlw	1
  2418  0016E2  6E06               	movwf	LCD8send@mode,c
  2419  0016E4  0E65               	movlw	101
  2420  0016E6  ECD0  F00C         	call	_LCD8send
  2421                           
  2422                           ;LCD8.c: 36:  LCD8send('h',1);
  2423  0016EA  0E01               	movlw	1
  2424  0016EC  6E06               	movwf	LCD8send@mode,c
  2425  0016EE  0E68               	movlw	104
  2426  0016F0  ECD0  F00C         	call	_LCD8send
  2427                           
  2428                           ;LCD8.c: 38:  LCD8send(0xC0,0);
  2429  0016F4  0E00               	movlw	0
  2430  0016F6  6E06               	movwf	LCD8send@mode,c
  2431  0016F8  0EC0               	movlw	192
  2432  0016FA  ECD0  F00C         	call	_LCD8send
  2433                           
  2434                           ;LCD8.c: 39:  LCD8send('#',1);
  2435  0016FE  0E01               	movlw	1
  2436  001700  6E06               	movwf	LCD8send@mode,c
  2437  001702  0E23               	movlw	35
  2438  001704  ECD0  F00C         	call	_LCD8send
  2439  001708  0012               	return		;funcret
  2440  00170A                     __end_of_LCD8init:
  2441                           	opt callstack 0
  2442                           
  2443 ;; *************** function _LCD8send *****************
  2444 ;; Defined at:
  2445 ;;		line 42 in file "LCD8.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;  c               1    wreg     unsigned char 
  2448 ;;  mode            1    5[COMRAM] unsigned char 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;  c               1    6[COMRAM] unsigned char 
  2451 ;; Return value:  Size  Location     Type
  2452 ;;                  1    wreg      void 
  2453 ;; Registers used:
  2454 ;;		wreg, status,2, status,0, cstack
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2460 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2463 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2464 ;;Total ram usage:        2 bytes
  2465 ;; Hardware stack levels used:    1
  2466 ;; Hardware stack levels required when called:    1
  2467 ;; This function calls:
  2468 ;;		_delay_ms
  2469 ;;		_delay_us
  2470 ;; This function is called by:
  2471 ;;		_main
  2472 ;;		_LCD8init
  2473 ;;		_main2
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           	psect	text14
  2478  0019A0                     __ptext14:
  2479                           	opt callstack 0
  2480  0019A0                     _LCD8send:
  2481                           	opt callstack 29
  2482                           
  2483                           ;incstack = 0
  2484                           ;LCD8send@c stored from wreg
  2485  0019A0  6E07               	movwf	LCD8send@c,c
  2486                           
  2487                           ;LCD8.c: 42: void LCD8send(char c, char mode);LCD8.c: 43: {;LCD8.c: 44:  LATHbits.LATH2 
      +                          = mode;
  2488  0019A2  B006               	btfsc	LCD8send@mode,0,c
  2489  0019A4  D002               	bra	u1025
  2490  0019A6  9490               	bcf	3984,2,c	;volatile
  2491  0019A8  D001               	bra	u1026
  2492  0019AA                     u1025:
  2493  0019AA  8490               	bsf	3984,2,c	;volatile
  2494  0019AC                     u1026:
  2495                           
  2496                           ;LCD8.c: 45:  delay_ms(1);
  2497  0019AC  0E00               	movlw	0
  2498  0019AE  6E02               	movwf	delay_ms@x+1,c
  2499  0019B0  0E01               	movlw	1
  2500  0019B2  6E01               	movwf	delay_ms@x,c
  2501  0019B4  EC09  F00D         	call	_delay_ms	;wreg free
  2502                           
  2503                           ;LCD8.c: 47:  LATE = c;
  2504  0019B8  C007  FF8D         	movff	LCD8send@c,3981	;volatile
  2505                           
  2506                           ;LCD8.c: 48:  LATHbits.LATH0 = 1;
  2507  0019BC  8090               	bsf	3984,0,c	;volatile
  2508                           
  2509                           ;LCD8.c: 49:  delay_us(1);
  2510  0019BE  0E00               	movlw	0
  2511  0019C0  6E02               	movwf	delay_us@x+1,c
  2512  0019C2  0E01               	movlw	1
  2513  0019C4  6E01               	movwf	delay_us@x,c
  2514  0019C6  EC51  F00D         	call	_delay_us	;wreg free
  2515                           
  2516                           ;LCD8.c: 50:  LATHbits.LATH0 = 0;
  2517  0019CA  9090               	bcf	3984,0,c	;volatile
  2518                           
  2519                           ;LCD8.c: 51:  delay_us(50);
  2520  0019CC  0E00               	movlw	0
  2521  0019CE  6E02               	movwf	delay_us@x+1,c
  2522  0019D0  0E32               	movlw	50
  2523  0019D2  6E01               	movwf	delay_us@x,c
  2524  0019D4  EC51  F00D         	call	_delay_us	;wreg free
  2525  0019D8  0012               	return		;funcret
  2526  0019DA                     __end_of_LCD8send:
  2527                           	opt callstack 0
  2528                           
  2529 ;; *************** function _delay_us *****************
  2530 ;; Defined at:
  2531 ;;		line 15 in file "delay.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;  x               2    0[COMRAM] int 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  i               2    3[COMRAM] int 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, status,2, status,0
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2545 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;Total ram usage:        5 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; This function calls:
  2552 ;;		Nothing
  2553 ;; This function is called by:
  2554 ;;		_LCD8send
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           	psect	text15
  2559  001AA2                     __ptext15:
  2560                           	opt callstack 0
  2561  001AA2                     _delay_us:
  2562                           	opt callstack 29
  2563                           
  2564                           ;delay.c: 15: void delay_us(int x);delay.c: 16: {;delay.c: 17:     for (int i = 0; i < x
      +                          ; i++)
  2565                           
  2566                           ;incstack = 0
  2567  001AA2  0E00               	movlw	0
  2568  001AA4  6E05               	movwf	delay_us@i+1,c
  2569  001AA6  0E00               	movlw	0
  2570  001AA8  6E04               	movwf	delay_us@i,c
  2571  001AAA  D005               	goto	l1505
  2572  001AAC                     l28:
  2573                           
  2574                           ;delay.c: 18:  {;delay.c: 19:         _delay((unsigned long)((1)*(25000000/4000000.0)));
  2575  001AAC  D000               	nop2		;2 cycle nop
  2576  001AAE  D000               	nop2		;2 cycle nop
  2577  001AB0  D000               	nop2		;2 cycle nop
  2578                           
  2579                           ;delay.c: 20:     }
  2580  001AB2  4A04               	infsnz	delay_us@i,f,c
  2581  001AB4  2A05               	incf	delay_us@i+1,f,c
  2582  001AB6                     l1505:
  2583  001AB6  5001               	movf	delay_us@x,w,c
  2584  001AB8  5C04               	subwf	delay_us@i,w,c
  2585  001ABA  5005               	movf	delay_us@i+1,w,c
  2586  001ABC  0A80               	xorlw	128
  2587  001ABE  6E03               	movwf	??_delay_us& (0+255),c
  2588  001AC0  5002               	movf	delay_us@x+1,w,c
  2589  001AC2  0A80               	xorlw	128
  2590  001AC4  5803               	subwfb	??_delay_us& (0+255),w,c
  2591  001AC6  B0D8               	btfsc	status,0,c
  2592  001AC8  0012               	return	
  2593  001ACA  D7F0               	goto	l28
  2594  001ACC                     __end_of_delay_us:
  2595                           	opt callstack 0
  2596                           
  2597 ;; *************** function _delay_ms *****************
  2598 ;; Defined at:
  2599 ;;		line 7 in file "delay.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  x               2    0[COMRAM] int 
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;  i               2    3[COMRAM] int 
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  1    wreg      void 
  2606 ;; Registers used:
  2607 ;;		wreg, status,2, status,0
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2613 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2614 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;Total ram usage:        5 bytes
  2618 ;; Hardware stack levels used:    1
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_LCD8init
  2623 ;;		_LCD8send
  2624 ;;		_main2
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text16
  2629  001A12                     __ptext16:
  2630                           	opt callstack 0
  2631  001A12                     _delay_ms:
  2632                           	opt callstack 29
  2633                           
  2634                           ;delay.c: 7: void delay_ms(int x);delay.c: 8: {;delay.c: 9:     for (int i = 0; i < x; i
      +                          ++)
  2635                           
  2636                           ;incstack = 0
  2637  001A12  0E00               	movlw	0
  2638  001A14  6E05               	movwf	delay_ms@i+1,c
  2639  001A16  0E00               	movlw	0
  2640  001A18  6E04               	movwf	delay_ms@i,c
  2641  001A1A  D00A               	goto	l21
  2642  001A1C                     l1497:
  2643                           
  2644                           ;delay.c: 10:  {;delay.c: 11:         _delay((unsigned long)((1)*(25000000/4000.0)));
  2645  001A1C  0E09               	movlw	9
  2646  001A1E  6E03               	movwf	??_delay_ms& (0+255),c
  2647  001A20  0E1C               	movlw	28
  2648  001A22                     u1137:
  2649  001A22  2EE8               	decfsz	wreg,f,c
  2650  001A24  D7FE               	bra	u1137
  2651  001A26  2E03               	decfsz	??_delay_ms& (0+255),f,c
  2652  001A28  D7FC               	bra	u1137
  2653  001A2A  D000               	nop2	
  2654                           
  2655                           ;delay.c: 12:     }
  2656  001A2C  4A04               	infsnz	delay_ms@i,f,c
  2657  001A2E  2A05               	incf	delay_ms@i+1,f,c
  2658  001A30                     l21:
  2659  001A30  5001               	movf	delay_ms@x,w,c
  2660  001A32  5C04               	subwf	delay_ms@i,w,c
  2661  001A34  5005               	movf	delay_ms@i+1,w,c
  2662  001A36  0A80               	xorlw	128
  2663  001A38  6E03               	movwf	??_delay_ms& (0+255),c
  2664  001A3A  5002               	movf	delay_ms@x+1,w,c
  2665  001A3C  0A80               	xorlw	128
  2666  001A3E  5803               	subwfb	??_delay_ms& (0+255),w,c
  2667  001A40  B0D8               	btfsc	status,0,c
  2668  001A42  0012               	return	
  2669  001A44  D7EB               	goto	l1497
  2670  001A46                     __end_of_delay_ms:
  2671                           	opt callstack 0
  2672                           
  2673                           	psect	rparam
  2674  0000                     tosu	equ	0xFFF
  2675                           tosh	equ	0xFFE
  2676                           tosl	equ	0xFFD
  2677                           stkptr	equ	0xFFC
  2678                           pclatu	equ	0xFFB
  2679                           pclath	equ	0xFFA
  2680                           pcl	equ	0xFF9
  2681                           tblptru	equ	0xFF8
  2682                           tblptrh	equ	0xFF7
  2683                           tblptrl	equ	0xFF6
  2684                           tablat	equ	0xFF5
  2685                           prodh	equ	0xFF4
  2686                           prodl	equ	0xFF3
  2687                           indf0	equ	0xFEF
  2688                           postinc0	equ	0xFEE
  2689                           postdec0	equ	0xFED
  2690                           preinc0	equ	0xFEC
  2691                           plusw0	equ	0xFEB
  2692                           fsr0h	equ	0xFEA
  2693                           fsr0l	equ	0xFE9
  2694                           wreg	equ	0xFE8
  2695                           indf1	equ	0xFE7
  2696                           postinc1	equ	0xFE6
  2697                           postdec1	equ	0xFE5
  2698                           preinc1	equ	0xFE4
  2699                           plusw1	equ	0xFE3
  2700                           fsr1h	equ	0xFE2
  2701                           fsr1l	equ	0xFE1
  2702                           bsr	equ	0xFE0
  2703                           indf2	equ	0xFDF
  2704                           postinc2	equ	0xFDE
  2705                           postdec2	equ	0xFDD
  2706                           preinc2	equ	0xFDC
  2707                           plusw2	equ	0xFDB
  2708                           fsr2h	equ	0xFDA
  2709                           fsr2l	equ	0xFD9
  2710                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    0
    Data        26
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      95
    BANK0           160     38     102
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> main@buffer(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@buffer(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S661_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@buffer(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@buffer(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _LCD8init->_LCD8send
    _LCD8send->_delay_ms
    _LCD8send->_delay_us

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0   11552
                                             10 BANK0     28    28      0
                           _LCD8init
                           _LCD8send
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    6456
                                             87 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _LCD8init                                             0     0      0    2690
                           _LCD8send
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _LCD8send                                             2     1      1    2264
                                              5 COMRAM     2     1      1
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _delay_us                                             5     3      2     198
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     426
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD8init
     _LCD8send
       _delay_ms
       _delay_us
     _delay_ms
   _LCD8send
     _delay_ms
     _delay_us
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7F      0       0      38        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      30        0.0%
BANK12             100      0       0      28        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     26      66       5       63.7%
BITBANK14           80      0       0      33        0.0%
BANK14              80      0       0      34        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BIGRAM_1            60      0       0      37        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5D      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C5      29        0.0%
DATA                 0      0      C5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 22 16:22:22 2019

                     l21 1A30                       l28 1AAC                      l121 17D8  
                    l132 1086                      l134 108E                      l844 1A6E  
                    u600 1762                      u701 1430                      u720 1468  
                    u810 103A                      u580 171A                      u900 11DE  
                    u820 103C                      u901 11DC                      u670 1A54  
                    u910 11EC                      u920 11F0                      u850 107C  
                    u780 15A0                      u940 11FC                      u870 10A2  
                    u880 11BC                      _abs 1A46                      _pad 17AA  
                    wreg 000FE8             __CFG_FOSC$HS 000000             __CFG_WDT$OFF 000000  
                   ?_abs 0013                     l1301 1722                     l1311 19E4  
                   l1321 1A86                     l1315 19FA                     l1331 17C2  
                   l1421 15E4                     l1413 1588                     l1405 154A  
                   l1341 17FA                     l1415 159C                     l1319 1A82  
                   l1335 17D0                     l1505 1AB6                     l1361 1402  
                   l1425 15FA                     l1409 156E                     l1345 1826  
                   l1337 17E2                     l1531 1380                     l1373 1450  
                   l1429 1620                     l1453 10A8                     l1525 1344  
                   l1541 13A2                     l1375 1464                     l1367 142A  
                   l1439 1068                     l1535 138A                     l1631 187E  
                   l1393 14FC                     l1385 14C0                     l1457 10B6  
                   l1491 122A                     l1467 11AE                     l1563 18CE  
                   l1635 189A                     l1389 14D6                     l1565 18F4  
                   l1487 1212                     l1497 1A1C                     ?_pad 0011  
                   STR_1 1001                     u1000 12C6                     u1025 19AA  
                   u1041 184A                     u1026 19AC                     u1137 1A22  
                   _LATD 000F8C                     _LATE 000F8D                     abs@a 0013  
                   _dbuf 0066                     _main 1840                     _dtoa 1012  
                   _prec 0064                     _nout 0060                     pad@i 0018  
                   pad@p 0015                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 001A  
                   fsr2l 000FD9                     start 0000             ___param_bank 000000  
       __end_of_LCD8init 170A         __end_of_LCD8send 19DA                    ??_abs 0015  
                  ??_pad 0017          __end_of___aodiv 151E                    ?_main 0001  
                  ?_dtoa 001C          __end_of___aomod 1642             vfpfcnvrt@fmt 0042  
                  _PORTD 000F83                    _TRISD 000F95                    _TRISE 000F96  
                  _TRISH 000F99                    _flags 005E                    _fputc 170A  
                  _fputs 19DA                    pad@fp 0011                    _width 0062  
                  _putch 1AE6                    main@i 00AA                    dtoa@d 001E  
                  dtoa@i 003E                    dtoa@n 0036                    dtoa@p 0030  
                  dtoa@s 0034                    dtoa@w 0032                    tablat 000FF5  
                  plusw1 000FE3                    plusw2 000FDB                    status 000FD8  
        __end_of_sprintf 1962          __initialization 1962             __end_of_main 18BA  
           __end_of_dtoa 1254                   ??_main 005E                   ??_dtoa 0026  
          __activetblptr 000001                   ?_fputc 0001                   ?_fputs 000A  
                 ?_putch 0001         __end_of_delay_ms 1A46         __end_of_delay_us 1ACC  
         __CFG_XINST$OFF 000000             vfprintf@cfmt 0056                ??___aodiv 0011  
              ??___aomod 0011                   clear_0 1988                   pad@buf 0013  
                 dtoa@fp 001C                   _strlen 1A78                   fputc@c 0001  
                 fputs@c 000E                   fputs@i 000F                   fputs@s 000A  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 1910  
              ??_sprintf 005E                LCD8send@c 0007                ?_LCD8init 0001  
              ?_LCD8send 0006               __accesstop 0060  __end_of__initialization 1992  
          ___rparam_used 000001           __pcstackCOMRAM 0001             __pidataBANK0 1ACC  
          __end_of_fputc 17AA            __end_of_fputs 1A12            __end_of_putch 1AE8  
                ??_fputc 0005                  ??_fputs 000E                  ??_putch 0001  
             __pbssBANK0 0060               ??_LCD8init 0008               ??_LCD8send 0007  
                ?_strlen 0001                ?_delay_ms 0001                ?_delay_us 0001  
     __size_of_vfpfcnvrt 0182                  __Hparam 0000                  __Lparam 0000  
                ___aodiv 13D6                  ___aomod 151E                ?_vfprintf 0050  
           __psmallconst 1000                  __pcinit 1962                  __ramtop 1000  
                __ptext0 1840                  __ptext1 1910                  __ptext2 18BA  
                __ptext3 1254                  __ptext4 1012                  __ptext5 17AA  
                __ptext6 1A78                  __ptext7 19DA                  __ptext8 170A  
                __ptext9 1AE6          __size_of_strlen 002A             __size_of_abs 0032  
           __size_of_pad 0096               ??_delay_ms 0003               ??_delay_us 0003  
                _sprintf 1910                  main@msg 0090     end_of_initialization 1992  
                fputc@fp 0003                  fputs@fp 000C        __end_of_vfpfcnvrt 13D6  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 0056  
                strlen@a 0003                  strlen@s 0001               main@buffer 009A  
      __size_of_LCD8init 00C8        __size_of_LCD8send 003A              vfpfcnvrt@ap 0044  
            vfpfcnvrt@fp 0040              vfpfcnvrt@ll 0048           __end_of_strlen 1AA2  
    start_initialization 1962              __end_of_abs 1A78              __end_of_pad 1840  
            vfprintf@fmt 0052              __pdataBANK0 00AC                 ??_strlen 0003  
            __pbssCOMRAM 005E            __pcstackBANK0 0086         ___aodiv@dividend 0001  
      __size_of_delay_ms 0034        __size_of_delay_us 002A                 ?___aodiv 0001  
               ?___aomod 0001         ___aodiv@quotient 0013        __size_of_vfprintf 0056  
            __smallconst 1000                 ?_sprintf 0058           __size_of_fputc 00A0  
         __size_of_fputs 0038           __size_of_putch 0002                 _LCD8init 1642  
              _scan_code 00AC                 _LCD8send 19A0                delay_ms@i 0004  
              delay_ms@x 0001                 _LATHbits 000F90                delay_us@i 0004  
              delay_us@x 0001                main@F5215 00BC                _vfpfcnvrt 1254  
              copy_data0 1976                 __Hrparam 0000               vfprintf@ap 0054  
               __Lrparam 0000               vfprintf@fp 0050             __Lsmallconst 1000  
       __size_of___aodiv 0148         __size_of___aomod 0124               ?_vfpfcnvrt 0040  
        ___aodiv@divisor 0009          ___aodiv@counter 0011               sprintf@fmt 005A  
               _delay_ms 1A12                 _dtoa$200 002E                 _delay_us 1AA2  
               __ptext10 1A46                 __ptext11 151E                 __ptext12 13D6  
               __ptext13 1642                 __ptext14 19A0                 __ptext15 1AA2  
               __ptext16 1A12         __size_of_sprintf 0052            __size_of_main 007A  
          __size_of_dtoa 0242                 _vfprintf 18BA         ___aomod@dividend 0001  
              sprintf@ap 0088          ___aomod@divisor 0009              ??_vfpfcnvrt 0046  
        ___aomod@counter 0011             LCD8send@mode 0006                 sprintf@f 008A  
               sprintf@s 0058             ___aodiv@sign 0012             ___aomod@sign 0012  
